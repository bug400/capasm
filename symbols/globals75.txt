* ********************************************************************
* *
* * HP 75 GLOBALS
* *
* * Martin Hepperle & Everett Kaser, December 2016
* *
* * NOTE: THE ORGANIZATION OF THIS FILE HAS BEEN 'REARRANGED' FROM
* * THE ORIGINAL SOURCE FILE, FOR GREATER CLARITY, AND HAS BEEN
* * EXPANDED TO INCLUDE ADDITIONAL EQUATES AND ENTRY POINTS FOR
* * DISASSEMBLY PURPOSES.
* *
* ********************************************************************
*  __________________________________________________________________
* |KRGLO 30                                                          |
* |==================================================================|
* ||                                                                ||
* ||   @@     @@@  @@@@@@@@       @@@@     @@            @@@@@@     ||
* ||   @@    @@@   @@@@@@@@@    @@@@@@@@   @@           @@@@@@@@    ||
* ||   @@   @@@    @@     @@@  @@@    @@@  @@          @@@    @@@   ||
* ||   @@  @@@     @@      @@  @@      @@  @@          @@      @@   ||
* ||   @@ @@@      @@     @@   @@          @@          @@      @@   ||
* ||   @@@@@       @@@@@@@     @@          @@          @@      @@   ||
* ||   @@@@@       @@@@@@@     @@   @@@@@  @@          @@      @@   ||
* ||   @@ @@@      @@    @@@   @@   @@@@@  @@          @@      @@   ||
* ||   @@  @@@     @@     @@@  @@      @@  @@          @@      @@   ||
* ||   @@   @@@    @@      @@  @@@    @@@  @@          @@@    @@@   ||
* ||   @@    @@@   @@      @@   @@@@@@@@   @@@@@@@@@@   @@@@@@@@    ||
* ||   @@     @@@  @@      @@     @@@@     @@@@@@@@@@    @@@@@@     ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*

ZRO       ADDR              0     ; for JSB X,ZRO

* "Yes Joey, this is the very heart
* of the kangaroo system.  It is
* these otherwise innocuous bytes ...
* all subroutines must return as ...
* swallows to Capistrano, as the ...
* to Hinkley, Ohio."
*
*  __________________________________________________________________
* |                                                                  |
* |==================================================================|
* ||                                                                ||
* ||               @@@@@@@@      @@@@@@    @@      @@               ||
* ||               @@@@@@@@@    @@@@@@@@   @@@    @@@               ||
* ||               @@     @@@  @@@    @@@  @@@@  @@@@               ||
* ||   @@@@@@@@@@  @@      @@  @@      @@  @@@@@@@@@@  @@@@@@@@@@   ||
* ||   @@@@@@@@@@  @@     @@   @@      @@  @@  @@  @@  @@@@@@@@@@   ||
* ||               @@@@@@@     @@@@@@@@@@  @@  @@  @@               ||
* ||   @@@@@@@@@@  @@@@@@@     @@@@@@@@@@  @@      @@  @@@@@@@@@@   ||
* ||   @@@@@@@@@@  @@    @@@   @@      @@  @@      @@  @@@@@@@@@@   ||
* ||               @@     @@@  @@      @@  @@      @@               ||
* ||               @@      @@  @@      @@  @@      @@               ||
* ||               @@      @@  @@      @@  @@      @@               ||
* ||               @@      @@  @@      @@  @@      @@               ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*
STACK   ADDR   100000   ; the R6 stack (384d bytes long)
R6LIM1   ADDR   100440  ; leaves 96 bytes on R6 STACK
INPBUF-1 ADDR 100577    ; one in front of input buffer
INPBUF   ADDR   100600  ; input buffer (96 bytes long)
INP+1   ADDR   100601   ; offset into input buffer
INP+2   ADDR   100602   
INP+3   ADDR   100603   
INP+4   ADDR   100604   
INP+5   ADDR   100605   
INP+6   ADDR   100606   
INP+7   ADDR   100607   
INP+8   ADDR 100610  
INP+10   ADDR   100612   
INP+11   ADDR   100613   
INP+12   ADDR   100614   
INP+13   ADDR   100615   
INP+14   ADDR   100616   
INP+15   ADDR   100617   
INP+17   ADDR   100621   
INP+18   ADDR   100622   
INP+19   ADDR   100623   
INP+20   ADDR   100624   
INP+21   ADDR   100625   
INP+23   ADDR   100627   
INP+24   ADDR   100630   
INP+26   ADDR   100632   
INP+27   ADDR   100633   
INP+28   ADDR   100634   
INP+29   ADDR   100635   
INP+94   ADDR   100736   
INP+95   ADDR   100737   
CRSPOT   ADDR   100740   ; a spot for the CR if we overflow INPBUF or have protected input.

BUFLEN   EQU   96d       ; length of INPBUF (96 bytes)

*****************************************************
* buffers and temporary
* The following area is used as the area to hold error messages
* before printing and as a fixed location system scratch area of 82d bytes
*****************************************************
EBFLEN   EQU   34d       ; size of ERRBUF
ERRBUF   ADDR   100741   ; 34d byte error buffer start
TMPMEM   ADDR   100741   ; 82d byte temp memory area
PSTEMP   ADDR   101003   ; Beginning of 16d bytes of P.S.
TMPMM2   ADDR   101015   ; loc of first dedicated temp memory 38d more bytes
TMP2+2   ADDR   101017   ; a little ways into it
TMPLEN   EQU   38d       ; the length of the temp area
PROTEM   ADDR   101063   ; really honest-top-gosh temporary
TEMP2   ADDR   101073    ; referenced in KR&MTH

*****************************************************
* system memory organization pointers
*****************************************************
PRFILE   ADDR   101103   ; file pointer for file routines
EDFILE   ADDR   101105   ; pointer to the current file edited
RNFILE   ADDR   101107   ; old pointer to current run program
KLUDGE   ADDR   101111   ; the ADJUST kludge address
PILPTR   ADDR   101113   ; pointer for active I/O line
CODLOC   ADDR 101113     ; BARCODE ROM
PCR      ADDR   101115   ; BASIC program line pointer
FWUSER   ADDR   101117   ; FWA user area
FWVARS   ADDR   101121   ; pointer to base address of current var environment
NXTMEM   ADDR   101123   ; next in available user memory
STSIZE   ADDR   101125   ; statement size place holder
TOS      ADDR   101127   ; current top of R12 stack
EXTRAG   ADDR   101131   ; unused (reserved for PPC use)

* ** NOTE: ZZZZZZ assumes that LAVAIL thru LWAMEM = 8 bytes
* ** If this changes, change code for added ram in ZZZZZZ (w

LAVAIL   ADDR   101133   ; last available word in program area
NEWERR   ADDR   101135   ; proposed new error number used by ERR.R21 until we 
                         ; really decide to use and then it goes into ERRORS
FLAG1    ADDR   101136   ; flag for caller in ROM. Beware using this, it will 
                         ; get changed at warmstart if the user adds new ram
NXTRTN   ADDR   101137   ; next available GOSUB/RTN
LWAMEM   ADDR   101141   ; LWA user memory

* ** important filenames

PRNAME   ADDR   101143   ; filename parameter for file rou
EDNAME   ADDR   101153   ; the name of the currently edited file
EDTYPE   ADDR   101163   ; the type of the currently edited file
RNNAME   ADDR   101165   ; the name of the currently running program

* ** system status stuff

CURLN#   ADDR   101175   ; current line number
AUTOI    ADDR   101177   ; AUTO line# increment (zero if AUTO numbering off)
DRG      ADDR   101201   ; DEG/RAD/GRAD flag (0=RAD, 90C=DEG)
OPTBAS   ADDR   101202   ; 2 byte permanent
SVCWRD   ADDR   101204   ; BIT: 0=key, SRQ: 1=ROM, 6=BATT, 7=CMPRTR
*
* SVCWRD -- interrupts needing service attention
*  Bit 0 = key waiting in KEYHIT
*  Bit 1 = rom wants to know about
*  Bit 6 = turn on battery annunciator
*  Bit 7 = comparator want's service
*
CURFUN   ADDR   101205   ; current user function address
DELAY    ADDR   101207   ; delay constant (2^-14 sec units)
LOKPSW   ADDR   101214   ; password string for LOCK
STEP     ADDR   101224   ; the one and only step flag
X_K-1_   ADDR   101225   ; previous random number
ROMFL    ADDR   101235   ; ROM flag for HANDI/HANDIO containing the event number
BSEADR   ADDR   101236   ; ROM file base address (used by april ROM for SEND? data)
BEEPOK   ADDR   101240   ; if NOT 0, it is OK to beep
SLOT     ADDR   101241   ; current ROM slot as a FFxx enable address
ROMPTR   ADDR   101243   ; ROM resp. LEX file base address
ROMOFF   ADDR   101245   ; offset to make ROMPTR absolute
RUNING   ADDR   101247   ; the runnig flag (good for errors)
TRFLAG   ADDR   101250   ; byte of trace bits
RESULT   ADDR   101251   ; last result from DISP
FILLOC   ADDR   101261   ; where the last FOPEN found the file

* ** assign# stuff

A#LINE   ADDR   101263   ; assign # address of current line
A#IO   ADDR   101265   ; assign# address of iofile

* ** transform stuff

MISSNG   ADDR   101267   ; key for ROM missing in TRANSFORM
PARERR   ADDR   101270   ; flag for parsing errors in TRANSFORM

* ** hpil flags and constants

ESC?   ADDR   101271   ; escape flag for display driver
SUBFWV   ADDR   101272   ; current subroutines FWVARS

* ** the following 7 PIL constants should be kept together
DEVCNT   ADDR   101274   ; number of devices on HPIL loop
PLSTAT   ADDR   101275   ; HPIL driver information
* PLSTAT:
*   Bit 7=1 if HANDI call at sndfrm ne...
*   Bit 6  not used
*   Bit 5=1 if offio set
*   Bit 4=1 if disp is device assigned
*   Bit 3=1 if disp device active
*   Bit 2=1 if pr.is device assigned
*   Bit 1=1 if print device active
*   Bit 0=1 if must test loop before use
*
RAMLEN   ADDR   101276   ; length of lines in iofile
DEVLEN   ADDR   101277   ; length of lines in devfile
PILADR   ADDR   101300   ; the HP-IL device address for kangaroo
EOL      ADDR   101301   ; 1-3 byte EOL terminator string for prints
EOLLEN   ADDR   101304   ; the length of the EOL string starting at EOL
PILINT   ADDR   101305   ; HPIL interrupt mask for IO ROM used by card reader when it inhibits and restores interrupt
FAST!    ADDR   101306   ; HPIL fast insert and delete. If set, can feed Sndfrm a start location and len and it'll send out string. This is faster than calling Sndfrm once for each character that we want to send.
IOFLAG   ADDR   101307   ; I/O flags
CDIG   ADDR 101307   ; BARCODE ROM
DCOVFL   ADDR   101310   ; decompile overflow flag

* ** DISP/PRINT stuff

PRFLAG   ADDR   101311   ; any printing done yet? pointed to by P_FLAG
DSFLAG   ADDR   101312   ; any displaying done yet? pointed to by P_FLAG
DISPLN   ADDR   101313   ; display line width, set up by WIDTH statement, pointed to by LINELN
PRNTLN   ADDR   101314   ; printer line width, set up by PWIDTH statement, pointed to by LINELN
ROUTE    ADDR   101315   ; current output stream route 1=:display, 2=:printer
P_PTR    ADDR   101316   ; print length pointer to DISPTR or PRTPTR
P_FLAG   ADDR   101320   ; print flag pointer to DSFLAG or PRFLAG
LINELN   ADDR   101322   ; print width pointer to DISPLN or PRNTLN
PRNT#?   ADDR   101324   ; 1= in a PRINT# statement
DISPTR   ADDR   101325   ; current display output position pointed to by P_PTR
PRTPTR   ADDR   101327   ; current printer output position pointed to by P_PTR
USING?   ADDR   101331   ; 1 if USING an IMAGE statement

* ** LCD/keyboard stuff

CREST    ADDR   101332   ; how far along with LCD's ESC sequence?
I/RFLG   ADDR   101333   ; 1=insert, 0=replace
CURSOR   ADDR   101334   ; is the LCD on?
LETSEE   ADDR   101335   ; let user see output cad input
LCDESC   ADDR   101336   ; has LCD just seen an ESC character?
JUSTSO   ADDR   101337   ; have CHEDIT treat next key as normal
LCDOFF   ADDR   101340   ; disable LCD I/O flag
DEAD     ADDR   101341   ; clear LCD when next character arrives?
*****************************************************************************
* The QA department wants to know about changes to the following things:
*   LCDPTR, LCDWIN, LCDBUF, ANNFLG
* 'cause they use them in their automated test stuff and need to change it if they move.
*****************************************************************************

* ** LCDPTR & LCDWIN must be together in this order

LCDPTR   ADDR   101342   ; 2-byte LCD buffer pointer
LCDWIN   ADDR   101344   ; 2-byte LCD window pointer
LCDBUF   ADDR   101346   ; LCD buffer (96 bytes)

LCDMIN   EQU   80d      ; LCD far left address
LCDMAX   EQU   49d      ; LCD far right address
LCDSIZ   EQU   32d      ; the width of the LCD

* ** Annunciator positions

ANN.L    EQU   48d      ; LCD position of left annunciator
ANN.R    EQU   47d      ; LCD position of right annunciator

* ** Parameters for GETLN

GL.LIN   ADDR   101506   ; 2-byte line position
GL.CUR   ADDR   101510   ; 2-byte cursor position
GL.LEN   ADDR   101512   ; 1-byte input length
ANNFLG   ADDR   101513   ; annunciators status (one bit each)
SHIELD   ADDR   101514   ; 12d-byte 96d-bit protection shield mask (one bit for each character)
LASTCH   ADDR   101530   ; last character (2 bytes)
OLDLST   ADDR   101532   ; last LASTCH

* **********************************************************************
* INPCHK is the address of a routine that gets invoked each time the character
* editor gets a character.  This is used by the pocket secretary & time mode.
* **********************************************************************

INPCHK   ADDR   101534   ; address of CHEDIT address check

* ** keyboard stuff

KY.TYP   EQU 0      ; typewriter mode
KY.CAP   EQU 1      ; shift alphas
KY.PAD   EQU 2      ; numeric pad

CAPLOK   ADDR   101536   ; caps lock flag (could be any of the KY.xxx EQUs)
KEYHIT   ADDR   101537   ; key hit last
INPTR    ADDR   101540   ; input line pointer

* ** parse stuff

THENFL   ADDR   101542   ; legal after THEN-ish statement
PRECNT   ADDR   101544   ; count of the precedence groups
RTNFLG   ADDR   101545   ; invisible RTN parsetime flag, NO if INVRTN to be placed befor... EOL and/or GOTO (& ON GOTO) tok...
INPR10   ADDR   101546   ; parse pointer for INPUT statement
SAVR10   ADDR   101550   ; R10 saved permanenent (does anyone understand that?)

* ** error stuff

EDEBUG    ADDR   101552   ; debug for error (address of error called)
ERRR10   ADDR   101554   ; R10 at time of error (used for parsing errors)
ERRTMP   ADDR   101556   ; save error stuff
HANDLD   ADDR   101565   ; we HANDLeD this HANDI call
REPLN#   ADDR   101566   ; report a line number
DEFAUL   ADDR   101567   ; shall we default errors?
ERLIN#   ADDR   101570   ; line number in which last error occured
ERNUM#   ADDR   101572   ; last error number
ERRORS   ADDR   101573   ; number of current error or zero
ERRTYP   ADDR   101574   ; error type (prog/calc)
ERROM#   ADDR   101575   ; ROM number of last error
DCMLEN   ADDR   101577   ; decompile length limit (address of end of buffer)

* ** allocation stuff

FILEND   ADDR   101601   ; temp address of file end (2 bytes)
RSTAR    ADDR   101603   ; temp allocator (2 bytes)
CSTAR    ADDR   101605   ; temp allocator (1 byte)

* ** next 8 bytes cleared at once in allocate initialization

DFPAR1   ADDR   101606   ; begin of function varaible block
DFPAR2   ADDR   101610   ; end of function varaible block
EXTRAA   ADDR   101612   ; gets trashed in deallocation
ENVFLG   ADDR   101613   ; flag for call recursion
EXTRAE   ADDR   101615   ; gets trashed in deallocation

DIMFLG   ADDR   101616   ; dimension flag for ALLOC
VARPTR   ADDR   101617   ; pointer for variable pointer comp (ALLOC)
ERRSTP   ADDR   101621   ; err addr alloc (2 bytes)
EXTRAB   ADDR   101623   ; unused byte (reserved for PPC members)

* ** time stuff

TMBASE   ADDR   101624   ; time base storage (7 bytes)
TMEERR   ADDR   101633   ; time error storage (7 bytes)
TMEXCT   ADDR   101642   ; time last exact done (7 bytes)
TMEADJ   ADDR   101651   ; time adjust storage (7 bytes)

RMARG   ADDR   101660   ; The right margin (set by MARGIN)
ORIGIN   ADDR   101662   ; original file type for trasnfor (TEXT or LIF1)
STAND?   ADDR   101663   ; STANDBY ON HPIL info:
*                  bit 7 = 1 if no PIL timeout
*                  bit 0 = 1 if leave oscillator on between frames
*                  (other bits not used)
TMOUT?   ADDR   101664   ; timeout on/off flag: bit 0=1 if no deep sleep timeout (other bits not used)
TMEOUT   ADDR   101665   ; Kangaroo will count down this far before checking whether or not to go to deep sleep
LIGHT?   ADDR   101670   ; timeout for light sleep point. When the TMEOUT reaches this point, we will go to light sleep
EXTRAD   ADDR   101673   ; unused (reserved for use by PPC members)
XTNDLW   ADDR   101675   ; extended LEEWAY flag
LEEWAY   ADDR   101676   ; variable memory leeway
NEW?     ADDR   101700   ; new line marker for PRINT#, this is set if we have created a line for a print#
*                  but have not print#ed anything to it yet, so if we get an error we can delete it
LSTPLN   ADDR   101701   ; change in evironment size
LSTELN   ADDR   101703   ; last size of P.PLEN

* ** image stuff

IMSLEN   ADDR   101705   ; IMAGE start length
IMSADR   ADDR   101707   ; IMAGE starting address
IMCLEN   ADDR   101711   ; IMAGE current address
IMCADR   ADDR   101713   ; IMAGE current address
IMWADR   ADDR   101715   ; IMAGE wraparound address
STLIN#   ADDR   101717   ; temp for starting line number
STARAD   ADDR 101721   ; temp for renumber address
ENLIN#   ADDR   101721   ; temp ending line #, renumber address
ONFLG   ADDR   101723   ; on gosub/goto flag for decompile

* ** appointment stuff

TMPLAT   ADDR   101724   ; pocket secretary template (32 bytes)
APTSIZ   ADDR   101764   ; pocket secretary appt size
PSIOST   ADDR   101765   ; pocket secretary I/O status
PSSTAT   ADDR   101766   ; pocket secretary status
CNALRM   ADDR   101767   ; continuous alaram number (0=off)

* ** intercepts

INTBGN   ADDR 101770   ; beginning of the intercept space
KYIDLE   ADDR   101770   ; keyboard intercept used by DINGO
IMERR    ADDR   102000   ; IMAGE error intecept
IRQ20    ADDR   102010   ; loc for ROM -> RAM code, trashed at warmstart
PSTRAP    ADDR   102020   ; power supply intecept
HPINTC   ADDR   102030   ; HP header intecept (card reader)
PILTRP   ADDR   102040   ; HPIL intecept used by DINGO
SPAR0    ADDR   102050   ; spare interrupt 0
SPAR1    ADDR   102060   ; spare interrupt 1
SPAR2    ADDR   102070   ; spare interrupt 2
CMPINT   ADDR   102100   ; comparator intercept vector
INTEND   ADDR   102110   ; end of intercept area

* ** More stuff

EXTRAJ   ADDR   102110   ; littel used ram location.  LSbit of EXTRAJ...
*                  by MATHROM which assumes it is non-volatile, other bits not touched.
*                  Note that interrupts are not disabled when EXTRAJ is played with, so
*                  service code shouldn't use any bits.
NOCHEK   ADDR   102111   ; make CMPCHK do nothing (used for INPUT and c...)
EXTRAF   ADDR   102112   ; unused ram location
NDATTN   ADDR   102113   ; don't check for ATTN before sending
ROMNUM   ADDR   102114   ; current ROM at time of sleep
PWRFLG   ADDR   102116   ; 1= if below second battery interrupt
ALKFLG   ADDR   102117   ; alkaline battery flag
MINMIN   ADDR   102120   ; left LCD address
MAXMAX   ADDR   102121   ; right LCD address
SIZSIZ   ADDR   102122   ; LCD size
TOKEN    ADDR   102124   ; token number (or EROMTK, ROM#, token#)
WDBRIC   ADDR   102130   ; Wait, Delay, Beep RTC constant, absolute time to stop whatever
VCPNTR   ADDR   101135   ; Vzcalc pointer

**************************************************************************************
* VARIABLES FOR CARD READER
* (Wx indicates that variables in this group MUST be maintained in this grouping and order.)
**************************************************************************************

* ** don't separate or change the order of these variables

CRDSIZ   EQU   650d   ; Card size (data field) standard card size

FULTRK   ADDR   102137   ; maximum track size
CRDSTS   ADDR   102141   ; card status for verify
LSTTRK   ADDR   102142   ; last data track (of file) length

TMRBUF   ADDR 102144   ; Another name for TRKTBL
TMPMM3   ADDR   102144   ; Yet another name for TRKTBL
TRKTBL   ADDR   102144   ; track-load table #1 (38d bytes)

TMP3+1   ADDR 102145   ; and some locations inside TRKTBL
TRKT+1   ADDR   102145   
TMP3+3   ADDR   102147   
TRKT+3   ADDR   102147   
TMP3+4   ADDR   102150   
TMP3+5   ADDR   102151   
TRKT+5   ADDR   102151   
TMP3+6   ADDR   102152   
TMP3+7   ADDR   102153   
DNAME    ADDR   102154   
SRCPOS   ADDR   102160   
DSTPOS   ADDR   102162   

SUBPNT   ADDR   102212   ; return-stack mark #1
SUBP+1   ADDR   102213   ; return-stack mark #1
RTNSVE   ADDR 102214   ; Abort return pointer
ABTFLG   ADDR   102216   ; Abort flag
HPHEAD   ADDR   102217   ; HP header area #3 normally HPCV(700D)00
WRTPRO   ADDR   102227   ; write protect area #3, 0 ok to write, #0 not ok
SUBFRM   ADDR   102234   ; sub-format code #3 normally 0
FLHEAD   ADDR   102235   ; file header area #3 track # and # of tracks
TRKSZE   ADDR   102237   ; track size #3
FILSZE   ADDR   102241   ; file size #3
FILTYP   ADDR   102243   ; file type #3
TMEDTE   ADDR   102245   ; time/date created #3, 2^-14 secs since century
FILNME   ADDR   102251   ; file name #3
PASWRD   ADDR   102261   ; file password #3
FLECHK   ADDR   102265   ; file checksum #3 including directory
PRTSTS   ADDR   102267   ; partial file status #3 (normally =0)
PRT1ST   ADDR   102270   ; partial file 1st stmt #3 (# of bytes from track start to start of next statement)
PRTNXT   ADDR   102272   ; partial file next stmt #3 (same as PRT1ST but for next...)
CHKSUM   ADDR   102274   ; data checksum #3
HDCKSM   ADDR   102276   ; header checksum #3

*
* ** Comparator and ON TIMER stuff
*
* don't seperate or change order of these variables
*

CMPFLG   ADDR   102277   ; comparator flags
CMPPNT   ADDR   102300   ; comparator table pointer
CMPTBL   ADDR   102301   ; comparator table (63 bytes)
TMEINC   ADDR   102400   ; time adjust increment value (7 bytes)
TMRRTC   ADDR   102407   ; timer RTC for suspend (abs time of suspension)
TMRNMB   ADDR   102420   ; current timer line number
TMRFLG   ADDR   102420   ; pending timer flag (#0 means timer waiting to execute)
VARBAS   ADDR   102421   ; base of I/O ROM variables
BATTRY   ADDR   102423   ; battery interrupt levels (1st byte is #1 level, 2nd byte is #2 level)
BATTRY+   ADDR 102424
PRNT#1   ADDR   102425   ; =1 if 1st PRINT# item flag
ACCESS   ADDR   102426   ; access byte of current file for READ# PRINT# RESTORE#, etc.
FILNUM   ADDR   102427   ; current file number for READ# PRINT#
FLSPEC   ADDR   102431   ; file specifier for handling flag (see HANDI docs for meaning)
RNTYPE   ADDR   102432   ; the access bytes for the runfile
PERRSV   ADDR   102433   ; save area for errors around parse code
TEXT?    ADDR   102436   ; flag for PRINT# to TEXT files
RANDOM   ADDR   102437   ; random flag for ASSIGN#

**************************************************************************************
* The ROM table is here
**************************************************************************************
ROMTAB   ADDR   102440   ; table of ROM-enable addresses (42 bytes, FFxx)
TABEND   ADDR   102512   ; end of ROMTAB

**************************************************************************************
* The home directory is here
**************************************************************************************
DIRECT   ADDR   102512   ; beginning of directory

* ahrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr
*
*      *  ,--._________                  ___________.--,
*      *  |  |  _)_____) Avast ye swab! (_____(__   |  |
*      *  |  |_/ ___)                      (___  \__|  |
*      *  |  |   __)                         (__    |  |
*      *  |O_|____)    last loc at 854A hex    (____|_O|






G.A125   ADDR   120445   ; KANGA interrupt vector table value at ABS address 2 in ROM

*  __________________________________________________________________
* |                                                                  |
* |==================================================================|
* ||                                                                ||
* ||               @@@@@@@@@@          @@    @@@@@@                 ||
* ||               @@@@@@@@@@          @@   @@@@@@@@                ||
* ||                   @@             @@@  @@@    @@@               ||
* ||   @@@@@@@@@@      @@            @@@   @@      @@  @@@@@@@@@@   ||
* ||   @@@@@@@@@@      @@           @@@    @@      @@  @@@@@@@@@@   ||
* ||                   @@          @@@     @@      @@               ||
* ||   @@@@@@@@@@      @@         @@@      @@      @@  @@@@@@@@@@   ||
* ||   @@@@@@@@@@      @@        @@@       @@      @@  @@@@@@@@@@   ||
* ||                   @@       @@@        @@      @@               ||
* ||                   @@      @@@         @@@    @@@               ||
* ||               @@@@@@@@@@  @@           @@@@@@@@                ||
* ||               @@@@@@@@@@  @@            @@@@@@                 ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*
GINTEN   ADDR   177400   ; global interrupt enable address
GINTDS   ADDR   177401   ; global interrupt disable address
KEYSTS   ADDR   177402   ; keyboard status byte

CRDRDR   ADDR   177410   ; card reader status byte

IOSTAT   ADDR   177420   ; == PILR0, PIL register 0
IOINTC   ADDR 177421     ; IO CONTR-INTRUPT
IODATA   ADDR   177422   ; IO DATA
PPOLL   ADDR   177423    ; PARALLEL POLL REG
AUXINP   ADDR   177427   ; PIL R7 (BIT 0=OSCDIS)

PILR0    ADDR   177420   ; PIL register 0
PILR1    ADDR   177421   ; PIL register 1
PILR2    ADDR   177422   ; PIL register 2
PILR3    ADDR   177423   ; PIL register 3
PILR4    ADDR   177424   ; PIL register 4
PILR5    ADDR   177425   ; PIL register 5
PILR6    ADDR   177426   ; PIL register 6
PILR7    ADDR   177427   ; PIL register 7 (bit 7: 0=OSCDIS)

ROM3A    ADDR   177460   ; port 3 - 1st 8K
ROM1A    ADDR   177462   ; port 1 - 1st 8K
ROM2A    ADDR   177464   ; port 2 - 1st 8K
ROM3B    ADDR   177470   ; port 3 - 2nd 8K
ROM1B    ADDR   177472   ; port 1 - 2nd 8K
ROM2B    ADDR   177474   ; port 2 - 2nd 8K
ROM3C    ADDR   177500   ; port 3 - 3rd 8K
ROM1C    ADDR   177502   ; port 1 - 3rd 8K
ROM2C    ADDR   177504   ; port 2 - 3rd 8K

SYSSLT   ADDR   177506   ; ALTROM enable address
ROM3EN   ADDR   177506   ; enable system ROM
ROM3EN+1 ADDR 177507   ; disable system ROM

DIAG   ADDR   177510   ; enable diagnostic ROM slot
ROM3D    ADDR   177510   ; port 3 - top 8K

DIAG+1   ADDR   177511   ; disable diagnostic ROM slot
ROM1D    ADDR   177512   ; port 1 - top 8K
ROM2D    ADDR   177514   ; port 2 - top 8K
MELSLT   ADDR   177516   ; MELROM enable address

SAOFF    ADDR   177525   ; signature analysis off (DINGO)
*                  Causes test pads to become inactive (see SAON.)
CMPSB    ADDR   177600   ; comparator status byte
RTC      ADDR   177601   ; real time clock status byte
RTCSB   ADDR   177601   ; A SYNONYM FOR RTC
PSSB     ADDR   177602   ; Power Supply Status Bits
SAON     ADDR   177652   ; signature analysis on (DINGO)
*            Writing to this address causes test pads on various kangaroo chips
*            to become active.  This is used by Dave Patton's signature analysis
*            system to determine in conjunction with DINGO whether the hardware
*                  is functioning correctly.
LCD      ADDR   177774   ; LCD interface address
*  __________________________________________________________________
* | ROMS ROM#S                                                       |
* |==================================================================|
* ||                                                                ||
* ||   @@@@@@@@      @@@@@@    @@      @@    @@  @@      @@@@@@     ||
* ||   @@@@@@@@@    @@@@@@@@   @@@    @@@    @@  @@     @@@@@@@@    ||
* ||   @@     @@@  @@@    @@@  @@@@  @@@@    @@  @@    @@@    @@@   ||
* ||   @@      @@  @@      @@  @@@@@@@@@@  @@@@@@@@@@  @@      @@   ||
* ||   @@     @@   @@      @@  @@  @@  @@  @@@@@@@@@@  @@@          ||
* ||   @@@@@@@     @@      @@  @@  @@  @@    @@  @@     @@@@@@@     ||
* ||   @@@@@@@     @@      @@  @@      @@    @@  @@      @@@@@@@    ||
* ||   @@    @@@   @@      @@  @@      @@  @@@@@@@@@@         @@@   ||
* ||   @@     @@@  @@      @@  @@      @@  @@@@@@@@@@  @@      @@   ||
* ||   @@      @@  @@@    @@@  @@      @@    @@  @@    @@@     @@   ||
* ||   @@      @@   @@@@@@@@   @@      @@    @@  @@     @@@@@@@@    ||
* ||   @@      @@    @@@@@@    @@      @@    @@  @@      @@@@@@     ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*
* **********************************************************
* * Here are the official names of the kangaroo roms.      *
* * Only a group of foolhardy explorers doomed to certain  *
* * death would dare to use anything but these equates!    *
* **********************************************************
BASROM   ADDR   0      ; the BASic ROM
ALTROM   ADDR   1      ; the ALTername ROM
MELROM   ADDR   2      ; the Memory-Errors-Leftovers ROM
MONITR   ADDR   401    ; the monitor rom
TSTCRD   ADDR   402    ; the test card rom
APRLEX   ADDR   421    ; the april rom assembly stuff
APRBSC   ADDR   422    ; the april rom basic stuff
LODCRD   ADDR   1404   ; the load card rom
DEMOA    ADDR   50000  ; demo rom (first 8K)
DEMOB    ADDR   50001  ; demo rom (second 8K)
BARCROM ADDR 114623    ; barcode rom

ROM      ADDR   60000  ; where a rom begins

RMHEAD   ADDR 16343    ; the rom header.
* These two bytes are the first two bytes of all roms (not lexfiles in ram)

ROMDIR   ADDR 60002    ; where the ROM directory begins
RELMAR   ADDR   177777 ; relocation marker for lexfiles

**********************************************************************
* layout of ROM HEAD for all ROMS (relative offsets)
* RMHEAD   EQU 0       ALWAYS=1CE3 (00011100 11100011 inverted bit patterns, to see if a ROM is THERE)
* ROMDIR   EQU 2       where the ROM diretory begins
* RMDR.LOC EQU 2       loc of file
* RMDR.SIZ EQU 4       size of file
* RMDR.TYP EQU 6       type of file
* RMDR.TNM EQU 7       name of type
* RMDR.DAT EQU 10      date of creation, # of 2^14 secs since begnning of century
* RMDR.NAM EQU 14      name of file (8 chars)
* RMDR.ESZ EQU 24      size of directory entry (0 for ROMs)
* RM.ID    EQU 26      ROM ID number
* RM.RUN   EQU 30      pointer to RUNTIME TABLE
* RM.ASC   EQU 32      pointer to ASCII TOKEN TABLE
* RM.PAR   EQU 34      pointer to PARSETIME TABLE
* RM.ERR   EQU 36      pointer to ERROR MESSAGES
* RM.INI   EQU 40      pointer to INIT ROUTINE (HANDI calls this)
**********************************************************************
RM.ID   ADDR   0      ; rom id number
RM.RUN   ADDR 2       ; pointer to runtime table
RM.ASC   ADDR   4     ; pointer to ascii token table
RM.PAR   ADDR   6     ; pointer to parsetime entries
RM.ERR   ADDR   10    ; pointer to error messages
RM.INI   ADDR 12      ; pointer to init routine (this is what HANDI calls)

R60K      ADDR       060000     ; address of start of ROM at 6000
R60K.ID   ADDR       060026     ; ROM header ID
R60K.INI  ADDR       060040     ; ROM init routine

*  __________________________________________________________________
* |                                                                  |
* |==================================================================|
* ||                                                                ||
* ||   @@@@@@@@@@    @@@@@@    @@      @@      @@        @@@@@@     ||
* ||   @@@@@@@@@@   @@@@@@@@   @@      @@      @@       @@@@@@@@    ||
* ||   @@          @@@    @@@  @@      @@      @@      @@@    @@@   ||
* ||   @@          @@      @@  @@      @@      @@      @@      @@   ||
* ||   @@          @@      @@  @@      @@              @@@          ||
* ||   @@@@@@@@@   @@      @@  @@      @@               @@@@@@@     ||
* ||   @@@@@@@@@   @@  @@  @@  @@      @@                @@@@@@@    ||
* ||   @@          @@  @@  @@  @@      @@                     @@@   ||
* ||   @@          @@   @@@    @@      @@              @@      @@   ||
* ||   @@          @@    @@@   @@@    @@@              @@@     @@   ||
* ||   @@@@@@@@@@   @@@@@  @@   @@@@@@@@                @@@@@@@@    ||
* ||   @@@@@@@@@@    @@@   @@    @@@@@@                  @@@@@@     ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*
LEN8K   ADDR   20000   ; len of a ROM
LEN8K-23 ADDR 17751   ; len barcode ROM

**** DIRECTORY LAYOUT ***
DR.LOC  ADDR 0       ; loc of file
DR.SIZ  ADDR 2       ; size of file
DR.TYP  ADDR 4       ; type of file (access & type control)
DR.TNM  ADDR 5       ; name of type
DR.DAT  ADDR 6       ; date of creation, # of 2^14 secs since begnning of century
DR.NAM  ADDR 12      ; name of file (8 chars)

DRENSZ  EQU 22      ; size of dir entry
NAMLEN  EQU 10      ; size of name

* *** Program Control Block (PCB) offsets
*   "Cartwhelling carrige returns, Roo-man!"
*   "Whoa there Joey!", Roo-man turned in shock.
*   "Don't you think this alliteration stuff has gone too far?
* Cartwheeling carrige returns?  Come on!"
*   "But Roo-man, our image."
*   The man of a thousand algorithms paused.  He spoke softly now.
* "I guess you're right kid."  A loving smile of amusment crossed
* Roo-man's face, and giving Joey a mock right cross to the jaw,
* he said, "Ya know, kid, you're all right."  As he turned and
* strode off down the corridor Joey heard him murmer bemusedly to
* himself, "yeah kid, you're all right."  A big boyish grin broke
* out on Joey's freckled face (with only a trace of the horrible
* scars) and he ran after Roo-man like a school child let out for recess.
*
P.LEN     EQU 0     ; length of program plus PCB
P.PLEN    EQU 2     ; length of var pointer area
P.CLEN    EQU 4     ; length of common
P.ELEN    EQU 6     ; length of environment plus ECB
P.SPAR    EQU 10    ; spare bytes to use in CALL
PCBLEN    EQU 12    ; length of the PCB

* *** Environment Control Block (ECB) offsets
*    "Disolving disk drives Roo-man! I hope IBM doesn't sue us for our language."
*
* NOTE: in PUSHEN environment, offsets are not used direc
* but rather a series of pushes are used to reference
* the different components of the environment.
*
E.LEN     EQU 0     ; length of environment block
E.PREV    EQU 2     ; length of previous block (gives us a way back)
E.RMEM    EQU 4     ; amount of reserved memory (RESMEM)
E.FCNT    EQU 6     ; for/next count
E.GCNT    EQU 7     ; gosub count
E.EREX    EQU 10    ; address of token to be executed upon an ON ERROR
E.ERPC    EQU 12    ; PCR of the ON ERROR statement
E.ROM#    EQU 14    ; ROM number of mother program
E.MOM     EQU 16    ; name of the mother program
E.RTN     EQU 26    ; return address
E.PCR     EQU 30    ; we must also remember the PCR
E.STAT    EQU 32    ; current value of R16 (XSTAT)
E.DATA    EQU 33    ; location in current DATA line
E.DATL    EQU 34    ; pointer to current DATA line
ECBLEN    EQU 36    ; length of ECB

* *** Values in R16 (XSTAT) and RUNING flags to indicate the status of the machine.
*
*   "Gooly, Roo-man!  Why didn't they use just one status flag?"
*   "Arr-r-rh, me buck-o.  Ya see, it be 'nother one of those seas
* where they be sail'n with neither compass er map.  Fur as sure as
* the wind be blow'n round da horn, thar be no man alive worth his salt
* that know the mean'n of R16 enough to change it."
*   "Gosh Roo-man, where'd ye learn to talk like that?"
*   "I had fish for dinner."
*   "But Roo-man, I thought you were a vegetarian and, besides that, you hate fish."
*
IDLSTS    EQU 0      ; idle mode
CLCSTS    EQU 1      ; calculator mode
RUNSTS    EQU 2      ; running
DACSTS    EQU 3      ; deactivated (used in environment
* the following two are odd so th... they don't appear to be a runni... state (some places do a JEV)
EALSTS    EQU 375    ; environmental allocation (used by RUNING flag)
ALOSTS    EQU 377    ; allocation (used by RUNING flag only)

* *** bit constants
ONES   EQU      377
TRUE   EQU      377
FF      EQU      377
FFFF   EQU      177777

* *** Battery levels
ALKLN1    EQU 146D   ; 3.10v alkaline interrupt
ALKLN2    EQU 127D   ; 2.70v alkaline interrupt
NICAD1    EQU 167D   ; 3.55v nicad interrupt
NICAD2    EQU 155D   ; 3.30v nicad interrupt

* **********************************************
* * EVENT NUMBERS for use with HANDI and HANDIO
* **********************************************
*                 ERROR REASON
V.COLD   EQU 0D  ;  0   coldstart (power on)
V.WARM   EQU 1D  ;  0   warmstart (up from deep sleep)
*        EQU 2D  ;     
V.SLEE   EQU 3D  ;  0   goto deep sleep
V.RSTN   EQU 4D  ;  0   restore environment
V.SPY    EQU 5D  ; 15   interruptable point in program
V.STAL   EQU 6D  ;  0   the running program is stalled
V.EALO   EQU 7D  ;  0   environment allo (undef access
V.ALLO   EQU 8D  ;  0   allocate token with class > 56
V.DALO   EQU 9D  ;  0   de-allocate token with class > 56
V.DEC    EQU 10D ;  0   decompile token with class > 56
V.DIM    EQU 11D ;  0   dimension for string arrays
V.PARA   EQU 12D ;  0   strange function parameter
V.MAT    EQU 13D ;      matrix parsing handi call
*        EQU 14D ;     
*        EQU 15D ;     
V.TYPE   EQU 16D ;  0   typename extension in EDIT and
V.ASSI   EQU 17D ; 60   ASSIGN# runtime
V.CRUN   EQU 18D ;  0   CRUNCH loop
V.LOOP   EQU 19D ;  0   PIL: get control of loop
V.CHED   EQU 20D ;  0   CHEDIT: character editor
V.PAR    EQU 21D ;  0   PARSER intercept
V.STRA   EQU 22D ;  ?   PARSER: strange data type
V.SRQR   EQU 23D ;  0   PIL: service request received
V.ASSN   EQU 24D ;  0   PIL: assignio hook for iorom
V.ASN#   EQU 25D ;      PIL: assign# with device name
V.UNKD   EQU 26D ;      ASSIGN#: unknown data type
V.CALL   EQU 27D ;  0   internal call?
*        EQU 28D ;     
V.ETRG   EQU 29D ; 18   external comp trigger #1,#2,#3
*        EQU 30D ;     
*        EQU 31D ;     
V.WAIT   EQU 32D ;      we're waiting for a key
V.CAL.   EQU 33D ;  0   the CALL verb
V.CLOK   EQU 34D ;      Clock/Stopwatch trigger routine
V.APT0   EQU 35D ;      start of APPT command loop
V.AKEY   EQU 36D ;      process IO terminator in APPT
*        EQU 37D ;     
V.ARTN   EQU 38D ;      exit APPT mode
V.AFMT   EQU 39D ;      format display of appointment
*        EQU 40D ;     
V.APRC   EQU 41D ;      process an appointment
V.AACK   EQU 42D ;      acknowledge an appointment
V.ATRG   EQU 43D ;      trigger an appointment
V.ADV    EQU 44D ;      advance file ptr in unknown fil
V.ADDR   EQU 45D ;      PIL: get address for unknown na
V.ACC#   EQU 46D ;      ASSIGN#: wrong type file
V.EXST   EQU 47D ;      file existence handi call for CHAIN and FILE in JUICY FRUIT
V.SPEC   EQU 48D ; 60   filespec syntax error
V.FILE   EQU 49D ; 60   file command, use token to find
V.CARD   EQU 50D ;  0   doing card copy, E=1 (read), E=???? at end of each track
V.TMCX   EQU 51D ; 92   Time mode command extensions
V.TYP    EQU 52D ;      for I/O and EHN crossing for TY
V.CODE   EQU 53D ; 89   Bad select code in Advanced I/O
V.CLA#   EQU 54D ;      clearing the iofile
*        EQU 55D ;     
V.CHAR   EQU 56D ;      a strange ROUTE for a character
V.ENDL   EQU 57D ;      a strange ROUTE for a end-of-li
*        EQU 58D ;     
V.LFTY   EQU 59D ;      translate internal name to LIF
V.RFTY   EQU 60D ;      translate LIF format number to
*        EQU 61D ;     
V.VOLT   EQU 62D ;  0   volatile file purge at warmstar
V.ERR    EQU 63D ;      handi call at ERROR
V.INLN   EQU 64D ;      inline$ token (visicalc)
V.WTKY   EQU 65D ;      waitkey$ token (visicalc)
V.TEST   EQU 99D ;      the TEST event for XYZZY

* *** MELROM constants -- the RCB (Roofid Control Block)
*      The first 7 bytes of each line of the devfile are d
* standard PIL information.  The RCB is appended to the en
* information (starting at byte number 7, where the beginn
* line is byte 0).
*                        ------------>|            ------
*                        ^            v            ^
* +-------------------+ /|\ +vvvvvvvvvvvvvvvvvvv+ /|\ +vv
* | VF.COD    7     1 |  |  | VF.RSW   22     1 |  |  | V
* | Location of code  |  |  | Read, seek, write |  |  | C
* | to indicate Roofid|  |  +-------------------+  |  | m
* | has setup devfile |  |  | VF.TTT   23     1 |  |  +--
* | line.             |  |  | Tape to tape flag |  |  | V
* +-------------------+  |  +-------------------+  |  | L
* | VF.DL     8     4 |  |  | VF.CDE   24    32 |  |  | c
* | Directory location|  |  | Current Directory |  |  | e
* +-------------------+  |  | Entry             |  |  | (
* | VF.BIG   12     4 |  |  +- - - - - - - - - -+  |  +--
* | Directory Size    |  |  | VF.FTY   +10    2 |  |  | V
* +-------------------+  |  | Type of the the   |  |  | C
* | VF.LOC   16     3 |  |  | current direct-   |  |  | l
* | Current Location  |  |  | ory entry         |  |  | c
* | (byte, rec, track)|  |  + - - - - - - - - - +  |  +--
* +-------------------+  |  | VF.CST   +14    4 |  |  | V
* | VF.MED   19     2 |  |  | Current starting  |  |  | S
* | Number of records/|  |  | address           |  |  | r
* | medium, starting  |  |  |                   |  |  | t
* | the count with 0  |  |  + - - - - - - - - - +  |  +--
* +-------------------+  |  | VF.CLN   +18    4 |  |  
* | VF.FLG   21     1 |  |  | Current length    |  |  
* | Seek flag         |  |  |                   |  |  
* +vvvvvvvvvvvvvvvvvvv+  |  + - - - - - - - - - +  |  
*           |            |  | VF.CTC   +20    6 |  |  
*           |            |  | Time Of Creation, |  |  
*           |            |  | YYMMDDHHMMSS      |  |  
*           |            |  +vvvvvvvvvvvvvvvvvvv+  |  
*           v            |           v             |
*           ------------>|           ------------->|
*
VF.COD   EQU   7      ; code to indicate we have been h
VF.DL   EQU   10      ; start location of medium direct
VF.BIG   EQU   14      ; medium directory size
VF.LOC   EQU   20      ; current location on medium
VF.MED   EQU   23      ; maximum size of medium
VF.FLG   EQU   25      ; done seek before (flag = 0)
VF.RSW   EQU   26      ; current status (read, write, or
VF.TTT   EQU   27      ; current copy type (tape to tape
VF.CDE   EQU   30      ; current directory entry
VF.FTY   EQU   42      ; file type (current directory)
VF.CST   EQU   46      ; file start address (current dir
VF.CLN   EQU   52      ; file length (current directory)
VF.CTC   EQU   54      ; time of creation (current direc
VF.CMP   EQU   64      ; implementation bytes [password]
VF.CDL   EQU   70      ; location of current directory e
VF.2DE   EQU   73      ; space for another directory (in
VF.RDE   EQU   133      ; current directory in roo form
EXTLEN   EQU   109d   ; new length of devfile line with
VFREAD   EQU   1      ; doing read flag    \
VFWRITE EQU   0      ; doing write flag    --- used fo
VFSEEK   EQU   377      ; doing seek flag    /

* ** A quick study of the duodecimal system
* **********************************************************
* "Hey Roo-man!  Why do Vulcans have pointed ears?"
* "I don't know, Joey.  Why DO Vulcans have pointed ears?"
* "So they can count up to twelve!!!"
* **********************************************************

* ** Memory management values
* ****************************************
* "Memories light the corners of my mind.
*  Misty water colored memories
*  Of the way we were."
* ****************************************
* ** a collection of sizes

DVNMSZ   EQU   4      ; const = size of device name
PWNMSZ   EQU   4      ; const = size of password
FLNMSZ   EQU   8d      ; const = size of filename
GOSBSZ   EQU   6d      ; const = size of GOSUB entry
FORSZ   EQU   22d      ; const = size of FOR entry

LEWYSZ   EQU   576d   ; guaranteed room for R12 stack
ENDSIZ   EQU   5      ; length of the endline

TYPSIZ   EQU   2      ; size of the type information

* ** file TYPE stuff

* ** just the name bits
TYNAM   EQU   7      ; mask for the name bytes
TYNSYS   EQU   0      ; name of SYSTEM type
TYNAPP   EQU   65d      ; 'A' name of APPOINTMENT type
TYNBAS   EQU   66d      ; 'B' name of BASIC type
TYNLI1   EQU   73d      ; 'I' name of LIF type 1 file
TYNLEX   EQU   76d      ; 'L' name of LEX file
TYNROM   EQU   82d      ; 'R' name of ROM file
TYNTEX   EQU   84d      ; 'T' name of TEXT type
TYNVSC   EQU   87d      ; 'W' name of VISICALC file
TYN???   EQU   63d      ; '?' name of STRANGER type

* ** bit masks for access type byte
TYRAM?   EQU   128d   ; test if file in RAM
TYROM?   EQU   0      ; test if file in ROM
TYRUN?   EQU   64d      ; test if file can be run
TYEDT?   EQU   32d      ; test if file is editable
TYLST?   EQU   16d      ; test if file is listable
TYPUR?   EQU   8d      ; test if file can be purged
TYCOP?   EQU   4      ; test if file can be copied
TYLIN?   EQU 2      ; test if file is standard lined file
TYTOK?   EQU   1      ; test if file is token file
TYENTR   EQU 141d   ; type of code for PMS software (barcode ROM)

TYCODE   EQU   27      ; attributes byte of code for PMS (barcode ROM)

TYPRI?   EQU   52d      ; test if private
TYDAT?   EQU   126d   ; data file for PRINT#/READ#
TYLF1?   EQU   12d      ; is it LIF type 1 file?

* **********************************************************
* "Hi Roo-man! NNMRELPCLT."
* "Where'd you hear filthy talk like that, kid?"
* **********************************************************
* ** basic file types (TYname*256 + AccessBits)
* ** ie, TYname in upper byte, AccessBits in lower byte.
TYCALC   ADDR   342      ; filetype for calc
TYSYSM   ADDR   0      ; filetype for system
TYTEXT   ADDR   52276   ; filetype for text
TYBASC   ADDR   41376   ; filetype for basic
TYAPPT   ADDR   40614   ; filetype for appointment
TYLEXF   ADDR   46011   ; filetype for LEX
TYLIF1   ADDR   44614   ; filetype for LIF
TYROMF   ADDR   51214   ; filetype for ROM
TYDIAG   ADDR   10      ; filetype for diag

* ** constants

RTN      EQU   236      ; a return instruction
ONE      EQU   1
TWO      EQU   2
THREE   EQU   3
FOUR   EQU   4
FIVE   EQU   5
SIX      EQU 6
SEVEN   EQU   7
EIGHT   EQU   8D
NINE   EQU   9D
TEN      EQU   10D
TENTHOUS   ADDR   10000D
ONETHOUS   ADDR   1000D
ONEHUND      ADDR   100D

FILL1   EQU   377      ; -1 for protect shield
FILL0   EQU   0      ; 0 for protect shield

VACANT   ADDR   0      ; empty entries for address tables, e.g. runtime and parse tables

* ** Key equates

CR      EQU   13d      ; carriage return
LF      EQU   10d      ; line feed
BS      EQU   8d      ; backspace
FS      EQU   207      ; forward space
ESC      EQU   27d      ; escape

CNTL   EQU   100      ; control bit for non-ascii keys
SHIFT   EQU   40      ; shift bit for non-ascii keys

* ** The non-ASCII keys.  They are all >= 128d

ATTNKY   EQU   200      ; Attention Key
NAPKEY   EQU   240      ; Nap key
TABKEY   EQU   216      ; TAB key
TIMEKY   EQU   201      ; Time key
APPTKY   EQU   202      ; Appointment key
EDITKY   EQU   203      ; Edit key
UPKEY    EQU   204      ; Up arrow key
S+UPKY   EQU   244      ; SHIFT + UPKEY
DOWNKY   EQU   205      ; Down arrow key
S+DNKY   EQU   245      ; SHIFT + DOWNKY
LEFTKY   EQU   206      ; Left arrow key
RGHTKY   EQU   207      ; Right arrow key
IRKEY   EQU 210      ; Insert/Replace key
I/RKEY   EQU   210      ; Insert/Replace key
LITKEY   EQU   250      ; Literalize key = shift-I/R
FTCHKY   EQU   211      ; Fetch key
DELKEY   EQU   212      ; Delete key
CLRKEY   EQU   213      ; Clear key
LOCKKY   EQU   214      ; Lock key
RUNKEY   EQU   215      ; Run key
STEPKY   EQU   255      ; Step key = shift-RUN
BACKEY   EQU   217      ; Backspace key
SEMKEY   EQU 73      ; used in ZAP ROM

* ** Artificial keys

LEFT!   EQU   372      ; juggernaut go left!!
APNOTE   EQU   373      ; appt note mode switcher
APCMND   EQU   374      ; appt command mode switcher
BEEPKY   EQU   375      ; a beeping key used for errors in number pad
BYEKEY   EQU   376      ; key generated by BYE (like NAPK
NOPKEY   EQU   377      ; no-operation key

INTFLG   EQU   377      ; INTeger FLaG
STRLEN   EQU   32d      ; default LENgth for a STRing

* ** TOKEN equates

PGMRSW   EQU   241      ; program-mode reserved word ATTRIBUTE
CLCRSW   EQU   141      ; calc-mode reserved word ATTRIBUTE

* ** some relationships between tokens

ST#DIF   EQU   10      ; the difference between string compare tokens and numeric compare tokens
VTKDIF   EQU   20      ; the difference between address and fetch tokens for variables
FTKDIF   EQU   25      ; the difference between FN call tokens and the variable address tokens
ATKLIM   EQU   260      ; a limit above which the only variable referencing tokens are for A() and A(,)

* ** These are equates for token numbers

SNVTOK   EQU   1      ; simple numeric variable
SAVTOK   EQU   2      ; array
STRTOK   EQU   3      ; string
STOTOK   EQU   10      ; STORE SV
CRTNTK   EQU   15      ; CR
EOLTOK   EQU   16      ; end of line
LVA$TK   EQU   23      ; Lvalue string token
MST#TK   EQU   24      ; multistore numeric
MST$TK   EQU   25      ; multistore string
TAILTK   EQU   31      ; INPUT tail
INTTK   EQU   32      ; integer constant
JPSTOK   EQU   33      ; JMP FALSE
JMPTOK   EQU   34      ; JMP REL
SSC1TK   EQU   35      ; subscript 1 dim
SSC2TK   EQU   36      ; subscript 2 dim
PRARRY   EQU   42      ; print# array
RDARRY   EQU   44      ; read# array
SEMI   EQU   47      ; SEMICOLON
STARTK   EQU   52      ; *
ADDTOK   EQU   53      ; +
SUBTK2   EQU   55      ; diadic -
EQUALS   EQU   65      ; EQUALS
SUBTK1   EQU   70      ; monadic -
ATTOK   EQU   100      ; @
FNSYM   EQU   104      ; FN ILET
CATATK   EQU   106      ; CAT ALL
CAT$TK   EQU   110      ; CAT$
CATTK   EQU   112      ; CAT
CALLTK   EQU   117      ; CALL
RUNTK   EQU   124      ; RUN
DISPTK   EQU   126      ; DISP
GOTOK   EQU   132      ; GOTO
GOSTOK   EQU   133      ; GOSUB
INPTOK   EQU   137      ; INPUT
ONTOK   EQU   146      ; ON
EDITTK   EQU   163      ; EDIT
CLRVTK   EQU   170      ; CLEAR VARS
COPYTK   EQU   174      ; COPY
PURGTK   EQU   175      ; PURGE
RENATK   EQU   176      ; RENAME
MISTOK   EQU   202      ; ROM MISSING
ARY2TK   EQU   206      
RENUTK   EQU   211      ; RENUMBER
BANGTK   EQU   213      ; ! comment
IMAGTK   EQU   216      ; IMAGE
NXTTOK   EQU   217      ; NEXT
LETTOK   EQU   221      ; implied LET
CLRLTK   EQU   223      ; clear loop
CLRDTK   EQU   225      ; clear <device>
PRITOK   EQU   226      ; prime parse & primed string
TXTTOK   EQU   227      ; TEXT
BASTOK   EQU   230      ; BASIC
INTOTK   EQU   233      ; INTO
IPOPTK   EQU   234      ; invisible POP
TOTOK   EQU   237      ; TO
ULNTOK   EQU   240      ; USING line number
RDSTK.   EQU   241      ; READ string
CRTOK   EQU   242      ; PRINT end
PRS$TK   EQU   243      ; PRINT semicolon string
PRC$TK   EQU   244      ; PRINT comma string
PR#STK   EQU   245      ; PRINT# semicolon
COM#TK   EQU   246      ; PRINT# comma
CR#TOK   EQU   247      ; PRINT# eol
ONGUY   EQU   250      ; the ON token as in ON/OFF
OFFTOK   EQU   251      ; the OFF token as in ON/OFF
IFNDTK   EQU   257      ; invisible function end
EROMTK   EQU   264      ; external ROM
ARY1TK   EQU   265      ; 1 DIM ARRAY A()
ARY2TK   EQU   266      ; 2 DIM ARRAY A(,)
RDNTK.   EQU   310      ; READ(num)
USTOK   EQU   313      ; USING
THENTO   EQU   314      ; THEN
STPTOK   EQU   316      ; STEP
NOTTOK   EQU   320      ; NOT
ELSTOK   EQU   327      ; ELSE
TOTOK2   EQU   333      ; TO (assign)
RSTL#   EQU   334      ; RESTORE to line
LBRACK   EQU   336      ; [

*???INP#TK   EQU   320      ; INPUT number

RBRACT   EQU   337      ; ]
INP$TK   EQU   345      ; INPUT string
PRS#TK   EQU   347      ; PRINT semicolon numeric
PRC#TK   EQU   350      ; PRINT comma numeric

***********************************************************************
* Please note:
* When using KARMA, some EQUs can be avoided.
*    LDB R10,=BLANK
*    LDB R10,=' '
* Both lines of code perform the same function.
*
* Well, that's not QUITE true.
* Some of these equates (SEMI, for instance) represent token numbers,
* which are usually, but not always, equivalent to the ascii for the character.
* So watch out for this when doing parsing and runtime analysis of Basic tokens.
*                   -Jack IV
*
* The token equates should be used if possible for tokens and characters for
* when a character is needed.  That is the character is "*" and the token might be STARTK.
*                   -Heckendorn the Barbarian
*
* This is, of course, a matter of taste.
*                   -Jack IV
*
* As an opposing view, the token equate should be used for the token, and the
* '<char>' should be used for the character.
*                   -Raan
*
***********************************************************************

BLANK   EQU   32d      ; SPACE
PRIME   EQU   39d      ; ASCII prime (')
STAR   EQU   42d      ; *
DOLLAR   EQU   36d      ; $
PLUS   EQU   43d      ; +
MINUS   EQU   45d      ; -
OPEN   EQU   40d      ; (
CLOSE   EQU   41d      ; )
SLASH   EQU   47d      ; /
PERIOD   EQU   46d      ; .
COMMA   EQU   44d      ; ,
QUOTE   EQU   34d      ; "

* ** Joey talks about setting bits
* *****************************************************************************
* "Holy heuristics, Roo-man! Wouldn't it be neat if we could just say:
*  NOT#7  EQU  ~BIT#7
* or maybe:
*  ANM R17,=~BIT#5    clear bit 5
* Huh?? How about it? Huh?? Please???"
* *****************************************************************************

* *****************************************************************************
*
*               Roo-man ignores Joey
*
* *****************************************************************************

STRSIZ   EQU   4      ; size of a string on the R12 stack
ENDLIN   ADDR   124631   ; A999c special last line of program

* ** PIL constants
* ******************************************************************************
* NOTE: RFC should actually be RDY,0; but it is easier to think of it this way.
* ******************************************************************************

* * "Ooh icch, Roo-man, what is this stuff."
* * "Well, Joey, it looks like some more of that godless octal stuff.
* *  It's time to set out the octal hotel."

CMD      EQU   200      ; COMMAND
AAU      EQU   115200   ; CMD/auto unconfig   (200/232)
AAU_   EQU   232      ; lower byte of AAU
DCL      EQU   12200   ; CMD/device clear    (200/24)
DCL_   EQU   24      ; lower byte of DCL
IFC      EQU   110200   ; CMD/interface clr (200/220)
IFC_   EQU   220      ; lower byte of interface clear
LAD      EQU   20200   ; CMD/listen address(200/40)
LAD_   EQU   40      ; lower byte of LAD
LD_1__   EQU   41      ; lower byte of LAD (addr of 1)
SDC      EQU 2200   ; CMD/selected devclr (200/4)
SDC_   EQU   4      ; lower byte of SDC
TAD_   EQU   100      ; lower byte of TAD
UNL      EQU   37600   ; CMD/unlisten
UNL_   EQU   77      ; lower byte of UNL
UNT_   EQU   137      ; lower byte of UNT
RDY      EQU   240      ; ready
ASP      EQU   100240   ; RDY/auto address (240/2xx)
ASP_1_   EQU   100640   ; ASP with address of 1
ASP_   EQU   200      ; lower byte of ASP(address of 0)
RFC      EQU   240      ; RDY/ready for CMD (240/0)
IDY      EQU   300      ; identify

DDL_   EQU   240      ; DDL FRAME, LOW BYTE
DDT_   EQU   300      ; DDT FRAME, LOW BYTE
SAI      EQU   61640   ; SAI both bytes
NRD      EQU   41240   ; NRD frame, both bytes
SDA      EQU   60240   ; SDA frame, both bytes
SST      EQU   60640   ; SST frame, both bytes
ETO      EQU   40240   ; ETO frame, both bytes

* ** iofile offsets for assign#
* ** NOTE: ioopen expects data#, line# and type# to be adjacent

LEN#   EQU   2      ; length of entry in iofile
NAME#   EQU   3      ; entry for file name in iofile
DATA#   EQU   11d      ; entry for current data item#
LINE#   EQU   12d      ; entry for current line#
TYPE#   EQU   14d      ; entry for type of file in iofile
ROM#   EQU   15d      ; go entry for rom# if basic in rom

* ** PIL device table
* ** devfile offsets for devices
* ** see above for len#

DNAME   EQU   3      ; entry for device name
SETUP   EQU   5      ; entry for pr/disp is setup bits
DADDR   EQU   6      ; entry for device loop address
DACPOL   EQU   7      ; entry for device accessory poll

* ******************************************************************
* Register save/restore constants
* These equates are for use with the RSAVE, RREST, and EVIL routines.
* (These routines will save registers on the stack, or restore them
* from the stack.)  They save code when used in place of 4 or more
* consecutive PUMD (POMD) Rnn,+(-)R6 instructions.  Call as follows:
*
*    JSB =RSAVE         save the following:
*    DEF Snn-mm       registers nn thru mm
*    ...
*    JSB =RREST       restore the following:
*    DEF Rnn-mm       this.
*
*    RTN
*
* Or you could use EVIL:
*
*    JSB =EVIL        save the following:
*    DEF Snn-mm       registers nn thru mm
*    ...
*    RTN              will return to EVIL
*                     and restore those registers
*
* ******************************************************************
* Feel free to add more equates if you need them.  Here is a 41C
* program which computes the equate value:
*    LBL A; X~Y; DEC; X~Y; 256; X~Y; -; 256; *; +; OCT; RTN
* (~ means exchange, DEC and OCT are accessed with XEQ alpha <name> alpha).
* In USER mode, enter the start reg (first for save, last for restore),
* push ENTER, enter the number of regs, and push A.
*
* CAUTION
*
* The following things MUST be ADDRs, if they were EQUs, then they would
* relocate in a DEF.
*                     -Jack IV
* ******************************************************************

* ** R10-?
*S10-11   ADDR   177011      ; -2d*256d+10

* ** R17-?
*S17-77   ADDR   147417      ; -49d*256d+17

* ** R20-?
*S20-25   ADDR   175025      ;  -6d*256d+20
*S20-27   ADDR 174027      ;  -8d*256d+20
*S20-37   ADDR   170037      ; -16d*256d+20
*S20-33   ADDR   172033      ; -12d*256d+20
*S20-47   ADDR   164047      ; -24d*256d+20
*S20-57   ADDR   160057      ; -32d*256d+20
*S20-67   ADDR   154067      ; -40d*256d+20
*S20-77   ADDR   150077      ; -48d*256d+20

* ** R22-?
*S22-77   ADDR   151022      ; -46d*256d+22

* ** R26-?
*S26-37   ADDR   173037      ; -10d*256d+26

* ** R27-?
*S27-57   ADDR   163457      ; -25d*256d+27

* ** R30-?
*S30-31   ADDR   177031      ;  -2d*256d+30
*S30-57   ADDR   164057      ; -24d*256d+30
*S30-77   ADDR   154077      ; -40d*256d+30

* ** R36-37
*S36-77   ADDR   157077      ; -34d*256d+36

* ** R40-47
*S40-47   ADDR   174047      ; -8d*256d+40

* ** R41-47
*S41-47   ADDR   174447      ; -7d*256d+41

* ** R50-67
*S50-67   ADDR   170067      ; -16d*256d+50

* ** R55-57
*S55-57   ADDR   176457      ;  -3d*256d+55

* ***************************************************************
* MELROM CONSTANTS
*
* "Matriculating mammals, roo-man, what's a MELROM?"
* "The MELROM, Joey, is that which talks to Filbert."
* "What's a Filbert, roo-man?"
* "A Filbert is that which the MELROM talks to."
* "I think I saw this in a movie, roo-man."
* "That's real good kid.  And for 5 extra points,
*  can you tell me what move this was?"
*
* THE FOLLOWING CONSTANTS GIVE OFFSETS INTO THE FNB (FILE NAME BLOCK)
*
*                        .------------,
*                        |            |
*  +-------------------+ | +-------------------+
*  | FLDEV0    0     4 | | | FNBR60   24     8 |
*  | source device for | | | FLNAM1            |
*  | COPY, RENAME      | | | Target filename   |
*  +-------------------+ | | for COPY, RENAME  |
*  | FLDEV1    4     4 | | | - - - - - - - - - |
*  | target device for | | | FLDIR1   30     2 |
*  | COPY, RENAME      | | | Pointer to roo    |
*  +-------------------+ | | directory entry   |
*  | FLNAM     8     8 | | | for target file   |
*  | Filename for      | | | for COPY          |
*  | PURGE             | | +-------------------+
*  +-------------------+ | | FLPWD1   32     4 |
*  | FLNAM0   16     8 | | | Target password   |
*  | Source filename   | | | for COPY, RENAME  |
*  | for RENAME, COPY  | | +-------------------+
*  | - - - - - - - - - | | | FLPWD0   36     4 |
*  | FLDEV    20     4 | | | Source password   |
*  | Device for CAT    | | | for COPY, RENAME  |
*  | and PURGE         | | +-------------------+
*  | - - - - - - - - - | | | FNBSW    40     2 |
*  | FLDIR0   22     2 | | | Space for switch- |
*  | Pointer to roo    | | | ing R36/37 -- dev-|
*  | directory entry   | | | file pointers     |
*  | for source file   | | +-------------------+
*  | for COPY          | | | FLSFLG   42     1 |
*  +-------------------+ | | Flag for the same |
*           |            | | target and source |
*           `------------' | filename's.       |
*                          +-------------------+
*
* Total length of FNB is 43, equated to FNBLEN.

FLDEV0   EQU   0      ; source device for COPY, RENAME
FLDEV1   EQU   4      ; target device for COPY, RENAME
FLNAM   EQU   8d      ; filename for PURGE
FLNAM0   EQU   16d      ; source filename for RENAME, COPY
FLDEV   EQU   20d      ; device for CAT and PURGE
FLDIR0   EQU   22d      ; pointer to roo directory entry for source file for COPY
FNBR60   EQU   24d      ; filename for CAT, target
FLNAM1   EQU   24d      ; filename for COPY, RENAME
FLDIR1   EQU   30d      ; pointer to roo directory entry target file for COPY
FLPWD1   EQU   32d      ; target password for COPY, RENAME
FLPWD0   EQU   36d      ; source password for COPY, RENAME
FLSTOP   EQU   40d      ; number of registers pushed in initialization into the FNB
FNBSW   EQU   40d      ; space for switching R36/37
FLSFLG   EQU   42d      ; file same flag
FNBLEN   EQU   43d      ; length of FNB
*
*************************************
BIT#0     EQU              1     
BIT#1     EQU              2     
BIT#2     EQU              4     
BIT#3     EQU             10     
BIT#4     EQU             20     
BIT#5     EQU             40     
BIT#6     EQU            100     
BIT#7     EQU            200     
NONE      EQU             11     
NOT#0     EQU            376    
NOT#1     EQU            375     
NOT#2     EQU            373     
NOT#3     EQU            367     
NOT#4     EQU            357
NOT#5     EQU            337
NOT#6     EQU            277     
NOT#7     EQU            177     
RSTLN     EQU            334     
STNDIF    EQU             10     

******************************************************
** COMPARATOR EQUs from file: CMP
******************************************************
ADJFLG   EQU   40      ; TIME ADJUST FLAG
APRFLG   EQU   100      ; REPEATING ALARM FLAG
APTFLG   EQU   200      ; APPOINTMENT FLAG
C/SFLG   EQU   20      ; CLOCK/STOPWATCH FLAG
CLRCLK   EQU   20      ; CLEAR CLOCK FLAG
CT.ADJ   EQU   42D      ; TIME ADJUST TABLE ENTRY
CT.DM1   EQU   35D      ; DUMMY 1 TABLE ENTRY
CT.DM2   EQU   49D      ; DUMMY 2 TABLE ENTRY
CT.DM3   EQU   56D      ; DUMMY 3 TABLE ENTRY
CT.RPA   EQU   14D      ; APPT REPEAT TABLE ENTRY
CT.APT   EQU   7D      ; APPOINTMENT TABLE ENTRY
CT.C/S   EQU   21D      ; CLOCK/STOPWATCH ENTRY
CT.RLV   EQU   0D      ; ROLLOVER ENTRY (MUST=0)
CT.TMR   EQU   28D      ; TIMER TABLE ENTRY
DECFLG   EQU   10      ; ADJUST DEC FLAG
DECRMT   EQU   10      ; CLOCK DECREMENT BIT
DM1FLG   EQU   2      ; DUMMY 1 FLAG
DM2FLG   EQU   4      ; DUMMY 2 FLAG
DM3FLG   EQU   10      ; DUMMY 3 FLAG
DSAINT   EQU   375      ; DISABLE INTERRUPT
ENAINT   EQU   2      ; ENABLE INTERRUPT
NEXACT   EQU   375      ; CLEAR EXACT BIT (PSSTAT)
RTCMSK   EQU   243      ; MASK FOR RTC STATUS
*TBLEND   EQU   63D      ; MARKER FOR TABLE END
TBLINC   EQU   7      ; TABLE INC VALUE
* WARNING! The following equate from CMP redefines another GLOBAL define!!!
*TMRFLG   EQU   1      ; TIMER FLAG
WAKEUP   EQU   277      ; FULL SPEED POWSUP STATUS
******************************************************
*
WILD   EQU   56      ; FROM IV%KCL
*
INP-LCD   EQU   177232   ; FROM KXIO - equal to (INPBUF-LCDBUF)
*  __________________________________________________________________
* | ENTRY                                                            |
* |==================================================================|
* ||                                                                ||
* ||   @@@@@@@@@@  @@      @@  @@@@@@@@@@  @@@@@@@@    @@      @@   ||
* ||   @@@@@@@@@@  @@      @@  @@@@@@@@@@  @@@@@@@@@   @@      @@   ||
* ||   @@          @@@     @@      @@      @@     @@@  @@      @@   ||
* ||   @@          @@@@    @@      @@      @@      @@  @@@    @@@   ||
* ||   @@          @@ @@   @@      @@      @@     @@    @@@  @@@    ||
* ||   @@@@@@@@@   @@  @@  @@      @@      @@@@@@@        @@@@      ||
* ||   @@@@@@@@@   @@  @@  @@      @@      @@@@@@@         @@       ||
* ||   @@          @@   @@ @@      @@      @@    @@@       @@       ||
* ||   @@          @@    @@@@      @@      @@     @@@      @@       ||
* ||   @@          @@     @@@      @@      @@      @@      @@       ||
* ||   @@@@@@@@@@  @@      @@      @@      @@      @@      @@       ||
* ||   @@@@@@@@@@  @@      @@      @@      @@      @@      @@       ||
* ||                                                                ||
* ||                                                                ||
* |==================================================================|
* |__________________________________________________________________|
*
ROM#0   ADDR       0   ; SYSROM0:
CLRVA.   ADDR      77   ; SYSROM0: 
CALNAM   ADDR     104   ; SYSROM0: 
UPSET    ADDR     134   ; SYSROM0: 
SETCAL   ADDR     147   ; SYSROM0: 
EXEC     ADDR     212   ; SYSROM0: 
CRUNCH   ADDR     235   ; SYSROM0: 
INTRP    ADDR     276   ; SYSROM0: 
ENDIT    ADDR     314   ; SYSROM0: 
SETR12   ADDR     341   ; SYSROM0: 
SETALN   ADDR     346   ; SYSROM0: 
* INITBL   ADDR     365   ; SYSROM0: 
DOCMD    ADDR     441   ; SYSROM0: 
OTHER    ADDR     515   ; SYSROM0: 
HANB     ADDR     552   ; SYSROM0: 
CONBIN   ADDR     612   ; SYSROM0: 
UNAUTO   ADDR     763   ; SYSROM0: 
OUTLIN   ADDR    1053   ; SYSROM0: 
REPORP   ADDR    1141   ; SYSROM0: 
REPRP#   ADDR    1142   ; SYSROM0: 
KEYSRV   ADDR    1167   ; SYSROM0: 
CRDSIZ   ADDR    1212   ; SYSROM0: 
TRKEY    ADDR    1246   ; SYSROM0: 
CMPSRV   ADDR    2012   ; SYSROM0: 
NOATTN   ADDR    2113   ; SYSROM0: 
CMAJST   ADDR    2271   ; SYSROM0: 
CMPENA   ADDR    2352   ; SYSROM0: 
CMPDSA   ADDR    2367   ; SYSROM0: 
CMPENT   ADDR    2401   ; SYSROM0: 
CMPCHK   ADDR    2454   ; SYSROM0: 
CMPSET   ADDR    2665   ; SYSROM0: 
CMPLD    ADDR    2677   ; SYSROM0: 
PWRSRV   ADDR    2756   ; SYSROM0: 
STOP?    ADDR    3046   ; SYSROM0: 
PWROK?   ADDR    3053   ; SYSROM0: 
SVCSET   ADDR    3064   ; SYSROM0: 
SVCCLR   ADDR    3077   ; SYSROM0: 
B.INIT   ADDR    3114   ; SYSROM0: 
VERMN0   ADDR    3234   ; SYSROM0: 
BRT835   ADDR    3237   ; SYSROM0: 
BRT840   ADDR    3241   ; SYSROM0: 
MAKEIT   ADDR    3250   ; SYSROM0: 
LIT?     ADDR    3263   ; SYSROM0: 
CURSE+   ADDR    3277   ; SYSROM0: 
CURSE-   ADDR    3304   ; SYSROM0: 
SETLN    ADDR    3311   ; SYSROM0: 
SETLN+   ADDR    3351   ; SYSROM0: 
SETLIN   ADDR    3404   ; SYSROM0: 
SETCHR   ADDR    3520   ; SYSROM0: 
WAITKY   ADDR    3525   ; SYSROM0: 
LETBD    ADDR    3632   ; SYSROM0: 
DEQUE    ADDR    3643   ; SYSROM0: 
PUT.     ADDR    3660   ; SYSROM0: 
PUTKEY   ADDR    3701   ; SYSROM0: 
HLFOUT   ADDR    3726   ; SYSROM0: 
MSSOUT   ADDR    3743   ; SYSROM0: 
OUTSTR   ADDR    3752   ; SYSROM0: 
HLFLIN   ADDR    3761   ; SYSROM0: 
OUTCHR   ADDR    4014   ; SYSROM0: 
OUTC40   ADDR    4024   ; SYSROM0: 
OUTESC   ADDR    4031   ; SYSROM0: 
OUT1CH   ADDR    4035   ; SYSROM0: 
OUTEOL   ADDR    4054   ; SYSROM0: 
EOLND    ADDR    4065   ; SYSROM0: 
ATTN?    ADDR    4113   ; SYSROM0: 
KEY?     ADDR    4124   ; SYSROM0: 
BOUND    ADDR    4142   ; SYSROM0: 
CHECK    ADDR    4172   ; SYSROM0: 
BYE.     ADDR    4211   ; SYSROM0: 
ZZZZZZ   ADDR    4231   ; SYSROM0: 
AWAKE!   ADDR    4711   ; SYSROM0: 
SETPSB   ADDR    4715   ; SYSROM0: 
PAR1     ADDR    4727   ; SYSROM0: 
PAR1     ADDR    4727   ; SYSROM0: 
RETURN   ADDR    4746   ; SYSROM0: 
IOFILE   ADDR    4747   ; SYSROM0: 
APFIL0   ADDR    4757   ; SYSROM0: 
APFILE   ADDR    4767   ; SYSROM0: 
BLANKS   ADDR    4773   ; SYSROM0: 
NULERT   ADDR    5003   ; SYSROM0: 
SEARCH   ADDR    5005   ; SYSROM0: 
LOOKUP   ADDR    5046   ; SYSROM0: 
DTAB-1   ADDR    5113   ; SYSROM0: 
DTAB0    ADDR    5114   ; SYSROM0: 
DAYSEC   ADDR    5126   ; SYSROM0: 
KOPY     ADDR    5137   ; SYSROM0: 
NUMCHK   ADDR    5151   ; SYSROM0: 
TOASC2   ADDR    5221   ; SYSROM0: 
TOBCD2   ADDR    5236   ; SYSROM0: 
TOBCD8   ADDR    5270   ; SYSROM0: 
TOBIN2   ADDR    5314   ; SYSROM0: 
TOBIN8   ADDR    5333   ; SYSROM0: 
INIPRS   ADDR    5402   ; SYSROM0: 
INIPR-   ADDR    5406   ; SYSROM0: 
PARSER   ADDR    5416   ; SYSROM0: 
PARSIT   ADDR    5647   ; SYSROM0: 
PARSE!   ADDR    5652   ; SYSROM0: 
LINMED   ADDR    6025   ; SYSROM0: 
*EOL      ADDR    6174   ; SYSROM0: 
SFSCAN   ADDR    6232   ; SYSROM0: 
SCAN+    ADDR    6240   ; SYSROM0: 
SCAN     ADDR    6243   ; SYSROM0: 
INTEBR   ADDR    6426   ; SYSROM0: 
NUMBER   ADDR    6500   ; SYSROM0: 
SCHAR    ADDR    6753   ; SYSROM0: 
SCHAR0   ADDR    6755   ; SYSROM0: 
ALFA     ADDR    7002   ; SYSROM0: 
ALFA#    ADDR    7003   ; SYSROM0: 
DIGIT    ADDR    7034   ; SYSROM0: 
BACK10   ADDR    7053   ; SYSROM0: 
SAVRES   ADDR    7063   ; SYSROM0: 
SAVRS+   ADDR    7071   ; SYSROM0: 
RSTREG   ADDR    7121   ; SYSROM0: 
NUMVA+   ADDR    7155   ; SYSROM0: 
NUMVAL   ADDR    7160   ; SYSROM0: 
FUN1     ADDR    7701   ; SYSROM0: 
ERR89    ADDR   10116   ; SYSROM0: 
ARRAY    ADDR   10133   ; SYSROM0: 
SETCMA   ADDR   10146   ; SYSROM0: 
SETCM?   ADDR   10153   ; SYSROM0: 
ISCMA!   ADDR   10165   ; SYSROM0: 
CRCOM?   ADDR   10177   ; SYSROM0: 
SBSCR    ADDR   10207   ; SYSROM0: 
SMLINT   ADDR   10243   ; SYSROM0: 
NUMREP   ADDR   10266   ; SYSROM0: 
SBSCR    ADDR   10267   ; SYSROM0: 
STREX+   ADDR   10372   ; SYSROM0: 
STREXP   ADDR   10375   ; SYSROM0: 
STRREF   ADDR   10526   ; SYSROM0: 
STRCN+   ADDR   10623   ; SYSROM0: 
REM      ADDR   10656   ; SYSROM0: 
UNQUOT   ADDR   11022   ; SYSROM0: 
P1ANC!   ADDR   11054   ; SYSROM0: 
PUSH1A   ADDR   11057   ; SYSROM0: 
SCANE1   ADDR   11062   ; SYSROM0: 
PUSH45   ADDR   11067   ; SYSROM0: 
PUSH32   ADDR   11100   ; SYSROM0: 
PU368C   ADDR   11110   ; SYSROM0: 
S01$     ADDR   11120   ; SYSROM0: 
GET2N    ADDR   11130   ; SYSROM0: 
GET2N    ADDR   11130   ; SYSROM0: 
GETPA?   ADDR   11135   ; SYSROM0: 
GET1N    ADDR   11141   ; SYSROM0: 
SET1N    ADDR   11141   ; SYSROM0: 
GETPAR   ADDR   11144   ; SYSROM0: 
GETPAR   ADDR   11144   ; SYSROM0: 
SXX3     ADDR   11211   ; SYSROM0: 
GET1$    ADDR   11216   ; SYSROM0: 
GETSTP   ADDR   11226   ; SYSROM0: 
STREX!   ADDR   11231   ; SYSROM0: 
STRX-!   ADDR   11234   ; SYSROM0: 
S01N$    ADDR   11271   ; SYSROM0: 
S$012N   ADDR   11306   ; SYSROM0: 
G$!012   ADDR   11320   ; SYSROM0: 
S01N     ADDR   11327   ; SYSROM0: 
S012N    ADDR   11334   ; SYSROM0: 
S0TO4N   ADDR   11341   ; SYSROM0: 
S1TO2N   ADDR   11363   ; SYSROM0: 
TRY1N    ADDR   11374   ; SYSROM0: 
ASSIGN   ADDR   11403   ; SYSROM0: 
OPTION   ADDR   11437   ; SYSROM0: 
ONERRO   ADDR   11500   ; SYSROM0: 
PARSE!   ADDR   11503   ; SYSROM0: 
DIM      ADDR   11530   ; SYSROM0: 
DMNDCR   ADDR   11545   ; SYSROM0: 
DMDCR-   ADDR   11552   ; SYSROM0: 
DINITE   ADDR   11563   ; SYSROM0: 
TYPSTM   ADDR   11707   ; SYSROM0: 
DEF      ADDR   11741   ; SYSROM0: 
FNEND    ADDR   12157   ; SYSROM0: 
INPUT    ADDR   12527   ; SYSROM0: 
DATA     ADDR   12634   ; SYSROM0: 
RESTOR   ADDR   12725   ; SYSROM0: 
RETLIN   ADDR   12735   ; SYSROM0: 
READ#    ADDR   12745   ; SYSROM0: 
READ     ADDR   12763   ; SYSROM0: 
FORMAR   ADDR   13033   ; SYSROM0: 
ILET     ADDR   13104   ; SYSROM0: 
LET      ADDR   13111   ; SYSROM0: 
FNLET    ADDR   13226   ; SYSROM0: 
REFNUM   ADDR   13274   ; SYSROM0: 
IF       ADDR   13325   ; SYSROM0: 
ITHEN    ADDR   13337   ; SYSROM0: 
FOR      ADDR   13540   ; SYSROM0: 
NEXT     ADDR   13605   ; SYSROM0: 
ON       ADDR   13626   ; SYSROM0: 
GOTOPR   ADDR   13673   ; SYSROM0: 
GOTOSU   ADDR   13676   ; SYSROM0: 
SEQNO    ADDR   13730   ; SYSROM0: 
SEQ#     ADDR   13747   ; SYSROM0: 
NOCLC!   ADDR   13774   ; SYSROM0: 
QUIP?    ADDR   14007   ; SYSROM0: 
SALT     ADDR   14016   ; SYSROM0: 
SETRUN   ADDR   14252   ; SYSROM0: 
PRINT    ADDR   14276   ; SYSROM0: 
PRINT+   ADDR   14301   ; SYSROM0: 
PRINT#   ADDR   14345   ; SYSROM0: 
PRNT#+   ADDR   14350   ; SYSROM0: 
PLIST    ADDR   14406   ; SYSROM0: 
PURGE.   ADDR   14576   ; SYSROM0: 
EDPURG   ADDR   14606   ; SYSROM0: 
RENAM.   ADDR   14651   ; SYSROM0: 
FILHAN   ADDR   14671   ; SYSROM0: 
FLDDTH   ADDR   14677   ; SYSROM0: 
COPY.    ADDR   15103   ; SYSROM0: 
CDPC?    ADDR   15410   ; SYSROM0: 
UPRC*    ADDR   15465   ; SYSROM0: 
PLIST.   ADDR   15501   ; SYSROM0: 
LIST.    ADDR   15510   ; SYSROM0: 
HALT?    ADDR   15611   ; SYSROM0: 
GF2LN#   ADDR   15673   ; SYSROM0: 
GRANGE   ADDR   15730   ; SYSROM0: 
DELET.   ADDR   16001   ; SYSROM0: 
RENUM.   ADDR   16056   ; SYSROM0: 
FRENUM   ADDR   16137   ; SYSROM0: 
RTDIN    ADDR   16352   ; SYSROM0: 
CONINT   ADDR   16467   ; SYSROM0: 
FETSVA   ADDR   16646   ; SYSROM0: 
FETAV    ADDR   16655   ; SYSROM0: 
FETSV    ADDR   16662   ; SYSROM0: 
FETNUM   ADDR   16665   ; SYSROM0: 
FETIND   ADDR   16670   ; SYSROM0: 
FETBET   ADDR   16703   ; SYSROM0: 
FETCHA   ADDR   16706   ; SYSROM0: 
FETRVA   ADDR   16720   ; SYSROM0: 
FNUM     ADDR   16770   ; SYSROM0: 
FETAVA   ADDR   17103   ; SYSROM0: 
FETST    ADDR   17337   ; SYSROM0: 
STRIND   ADDR   17370   ; SYSROM0: 
PUTREL   ADDR   17406   ; SYSROM0: 
PUTADR   ADDR   17407   ; SYSROM0: 
GETADR   ADDR   17421   ; SYSROM0: 
GETAD#   ADDR   17422   ; SYSROM0: 
GETAD+   ADDR   17424   ; SYSROM0: 
FLINIT   ADDR   17433   ; SYSROM0: 
RSETEN   ADDR   17455   ; SYSROM0: 
ONR12?   ADDR   17472   ; SYSROM0: 
SETRN    ADDR   17507   ; SYSROM0: 
SETPR    ADDR   17534   ; SYSROM0: 
ROOM?    ADDR   17555   ; SYSROM0: 
UROOM!   ADDR   17605   ; SYSROM0: 
ROOM!    ADDR   17612   ; SYSROM0: 
ALCALL   ADDR   17623   ; SYSROM0: 
ALLDC    ADDR   17637   ; SYSROM0: 
DELETE   ADDR   17663   ; SYSROM0: 
FPURGE   ADDR   17726   ; SYSROM0: 
INSERT   ADDR   17774   ; SYSROM0: 
* ***************************                      
ROM#1    ADDR   20000   ; SYSROM1: start
FCRALO   ADDR   20021   ; SYSROM1:
FCREAT   ADDR   20155   ; SYSROM1:
FCRNUL   ADDR   20170   ; SYSROM1:
BASEND   ADDR   20232   ; SYSROM1
FEMPT?   ADDR   20245   ; SYSROM1
FRENAM   ADDR   20304   ; SYSROM1
FCOPY    ADDR   20404   ; SYSROM1
FCOPYG   ADDR   20424   ; SYSROM1
FNDLPR   ADDR   20500   ; SYSROM1
FNDLRN   ADDR   20506   ; SYSROM1
FNDLED   ADDR   20514   ; SYSROM1
FSEEK    ADDR   20524   ; SYSROM1
PFNDPR   ADDR   20544   ; SYSROM1
PREFND   ADDR   20552   ; SYSROM1
SKPLN    ADDR   20605   ; SYSROM1
SKPLN#   ADDR   20607   ; SYSROM1
IOOPEN   ADDR   20616   ; SYSROM1
IZOPEN   ADDR   20631   ; SYSROM1
FSREPL   ADDR   20644   ; SYSROM1
REPLIN   ADDR   20647   ; SYSROM1
LINLEN   ADDR   20745   ; SYSROM1
DELLIN   ADDR   20763   ; SYSROM1
PTALO?   ADDR   21007   ; SYSROM1
FLOPEN   ADDR   21022   ; SYSROM1
MOVEUP   ADDR   21030   ; SYSROM1
FDELLN   ADDR   21037   ; SYSROM1
DELLNS   ADDR   21055   ; SYSROM1
FREPLS   ADDR   21114   ; SYSROM1
FREPLN   ADDR   21131   ; SYSROM1
MOVE     ADDR   21160   ; SYSROM1
COPY     ADDR   21347   ; SYSROM1
ADJUST   ADDR   21477   ; SYSROM1
INSRTM   ADDR   21716   ; SYSROM1
REPLAC   ADDR   21753   ; SYSROM1
RESCON   ADDR   22030   ; SYSROM1: 
RSMEM-   ADDR   22037   ; SYSROM1: 
RSMEM=   ADDR   22040   ; SYSROM1
RELMEM   ADDR   22123   ; SYSROM1
TYPOK?   ADDR   22170   ; SYSROM1
FOPAC?   ADDR   22177   ; SYSROM1
FOPEN!   ADDR   22222   ; SYSROM1
GOPEN!   ADDR   22227   ; SYSROM1
FOPEN    ADDR   22240   ; SYSROM1
FOPENG   ADDR   22244   ; SYSROM1
GOPEN    ADDR   22314   ; SYSROM1
ROPEN    ADDR   22321   ; SYSROM1
GETRID   ADDR   22370   ; SYSROM1
SIGNIF   ADDR   22373   ; SYSROM1
SIGNF-   ADDR   22376   ; SYSROM1
ROMCLA   ADDR   22564   ; SYSROM1
ROMCL-   ADDR   22573   ; SYSROM1
PTRALO   ADDR   22603   ; SYSROM1
FRET     ADDR   23241   ; SYSROM1
ENTSIZ   ADDR   23511   ; SYSROM1
ROMCPY   ADDR   23575   ; SYSROM1
ROMVPA   ADDR   23607   ; SYSROM1
VSRCH    ADDR   23640   ; SYSROM1
SKPVR    ADDR   23702   ; SYSROM1
VSTOR    ADDR   23742   ; SYSROM1
ALOSNV   ADDR   23771   ; SYSROM1
AVCALL   ADDR   24003   ; SYSROM1
ALVENT   ADDR   24350   ; SYSROM1
TSTRM    ADDR   24431   ; SYSROM1
TSTEND   ADDR   24445   ; SYSROM1
Z36.56   ADDR   25147   ; SYSROM1
ZROMEM   ADDR   25154   ; SYSROM1
ZROM1-   ADDR   25171   ; SYSROM1
FNDVPA   ADDR   25234   ; SYSROM1
ENVALO   ADDR   25253   ; SYSROM1
ENVERR   ADDR   25747   ; SYSROM1
PUTCAL   ADDR   26024   ; SYSROM1
MOVENV   ADDR   26026   ; SYSROM1
CLNCAL   ADDR   26127   ; SYSROM1
DALLAL   ADDR   26223   ; SYSROM1
DALLOC   ADDR   26334   ; SYSROM1
SKIPL    ADDR   26724   ; SYSROM1
ASCNAM   ADDR   27040   ; SYSROM1
ASCNM1   ADDR   27051   ; SYSROM1
ALINI    ADDR   27071   ; SYSROM1
GETINT   ADDR   27157   ; SYSROM1
BCDINT   ADDR   27167   ; SYSROM1
GETNXT   ADDR   27205   ; SYSROM1
GTNXT1   ADDR   27245   ; SYSROM1
NXTLIN   ADDR   27262   ; SYSROM1
SKPCON   ADDR   27312   ; SYSROM1
BININT   ADDR   27332   ; SYSROM1
FRMNAM   ADDR   27340   ; SYSROM1
FRMNA#   ADDR   27343   ; SYSROM1
CALCSZ   ADDR   27377   ; SYSROM1
DECOPR   ADDR   27506   ; SYSROM1
DECOM    ADDR   27515   ; SYSROM1
SCNST    ADDR   30117   ; SYSROM1
MVWRD    ADDR   30240   ; SYSROM1
GETNM    ADDR   30463   ; SYSROM1
DCLIN#   ADDR   31250   ; SYSROM1
UNSTAK   ADDR   31324   ; SYSROM1
SUBSCR   ADDR   31632   ; SYSROM1
PU=      ADDR   31720   ; SYSROM1
SISFUN   ADDR   32045   ; SYSROM1
QMARK    ADDR   32252   ; SYSROM1
EXTRJM   ADDR   32566   ; SYSROM1
VERMN1   ADDR   32612   ; SYSROM1
BATS     ADDR   32614   ; SYSROM1
SKIP#    ADDR   32742   ; SYSROM1
ACMND    ADDR   32762   ; SYSROM1
ANOTE    ADDR   33007   ; SYSROM1
LN20     ADDR   33052   ; SYSROM1
LN38     ADDR   33124   ; SYSROM1
LN30     ADDR   33150   ; SYSROM1
LN77     ADDR   33166   ; SYSROM1
LN5      ADDR   33462   ; SYSROM1
DIV77    ADDR   33504   ; SYSROM1
DIV2     ADDR   33553   ; SYSROM1
DIV10    ADDR   33556   ; SYSROM1
DIV14    ADDR   33561   ; SYSROM1
DIV20    ADDR   33606   ; SYSROM1
SHF10    ADDR   33611   ; SYSROM1
LOGT5    ADDR   33632   ; SYSROM1
CEIL10   ADDR   33650   ; SYSROM1
CHSROI   ADDR   33660   ; SYSROM1
SUBROI   ADDR   33712   ; SYSROM1
ADDROI   ADDR   33724   ; SYSROM1
ADD9     ADDR   34004   ; SYSROM1
ADD15    ADDR   34012   ; SYSROM1
ADD20    ADDR   34017   ; SYSROM1
EXP5     ADDR   34153   ; SYSROM1
SQR5     ADDR   34220   ; SYSROM1
SQR30    ADDR   34245   ; SYSROM1
MPY28    ADDR   34342   ; SYSROM1
MPY30    ADDR   34345   ; SYSROM1
MPYROI   ADDR   34475   ; SYSROM1
INTMUL   ADDR   34516   ; SYSROM1
YTX5     ADDR   34564   ; SYSROM1
SGN5     ADDR   34574   ; SYSROM1
LOGCOM   ADDR   34632   ; SYSROM1
SEC10    ADDR   34652   ; SYSROM1
CSEC10   ADDR   34672   ; SYSROM1
INF10    ADDR   34713   ; SYSROM1
CSEC11   ADDR   34721   ; SYSROM1
COT10    ADDR   34725   ; SYSROM1
SIN10    ADDR   34735   ; SYSROM1
COS10    ADDR   34745   ; SYSROM1
TAN10    ADDR   34755   ; SYSROM1
PI10     ADDR   34766   ; SYSROM1
RAD10.   ADDR   35050   ; SYSROM1
ABS5     ADDR   35103   ; SYSROM1
ABS5-    ADDR   35106   ; SYSROM1
INFR3    ADDR   35116   ; SYSROM1
INFR4    ADDR   35121   ; SYSROM1
INT5     ADDR   35150   ; SYSROM1
INTDIV   ADDR   35157   ; SYSROM1: 
INFR2    ADDR   35174   ; SYSROM1
INFR9    ADDR   35220   ; SYSROM1
FP5      ADDR   35241   ; SYSROM1
SHRONF   ADDR   35244   ; SYSROM1
RONF     ADDR   35247   ; SYSROM1
NFR      ADDR   35252   ; SYSROM1
EPS10    ADDR   35276   ; SYSROM1
DEG10    ADDR   35312   ; SYSROM1
DEGCNV   ADDR   35330   ; SYSROM1
IP5      ADDR   35350   ; SYSROM1
FTR12    ADDR   35407   ; SYSROM1
FTR13    ADDR   35415   ; SYSROM1
FTR53    ADDR   35744   ; SYSROM1
FTR88    ADDR   36143   ; SYSROM1
TRC7     ADDR   36225   ; SYSROM1
TRC01    ADDR   36237   ; SYSROM1
RNDINI   ADDR   36251   ; SYSROM1
RNDIZ.   ADDR   36262   ; SYSROM1
ROU10    ADDR   36270   ; SYSROM1
SEP20    ADDR   36310   ; SYSROM1
SEP15    ADDR   36337   ; SYSROM1
SEP10    ADDR   36343   ; SYSROM1
TWOR     ADDR   36402   ; SYSROM1
UT210    ADDR   36413   ; SYSROM1
PQO10    ADDR   36426   ; SYSROM1
MIN10    ADDR   36445   ; SYSROM1
MAX10    ADDR   36464   ; SYSROM1
EXP20    ADDR   36523   ; SYSROM1
EXP17    ADDR   36550   ; SYSROM1
DCON1    ADDR   37003   ; SYSROM1
TBL3     ADDR   37123   ; SYSROM1
ONEB     ADDR   37213   ; SYSROM1: get ONE Binary number
ONEI     ADDR   37254   ; SYSROM1: get ONE Integer number
TWOB     ADDR   37276   ; SYSROM1: get TWO Binary numbers
ONER     ADDR   37315   ; SYSROM1: get ONE Real
ONER-    ADDR   37320   ; SYSROM1
ONEROI   ADDR   37336   ; SYSROM1: get ONE Real Or Integer
ONERI    ADDR   37341   ; SYSROM1
TWOROI   ADDR   37351   ; SYSROM1
INTORL   ADDR   37426   ; SYSROM1
TMEFAC   ADDR   37473   ; SYSROM1
MVBYTS   ADDR   37503   ; SYSROM1
OFFTMR   ADDR   37520   ; SYSROM1
ONTMR    ADDR   37527   ; SYSROM1
TMRON.   ADDR   37573   ; SYSROM1
TM#GET   ADDR   37734   ; SYSROM1
TMRRLV   ADDR   37776   ; SYSROM1
*                      
ROM#2    ADDR   40000   ; SYSROM2: start
ADJTMR   ADDR   40011   ; SYSROM2
TMRDNE   ADDR   40040   ; SYSROM2 
TMROPN   ADDR   40057   ; SYSROM2
TMROF.   ADDR   40111   ; SYSROM2
TMRKIL   ADDR   40177   ; SYSROM2
TMRSS    ADDR   40216   ; SYSROM2
TMRCLR   ADDR   40236   ; SYSROM2
TMTRIG   ADDR   40243   ; SYSROM2
BLIMP    ADDR   40400   ; SYSROM2
NULOLD   ADDR   40410   ; SYSROM2
GETTEM   ADDR   40420   ; SYSROM2
GETTER   ADDR   40456   ; SYSROM2
GETREP   ADDR   40530   ; SYSROM2
GET.IN   ADDR   40555   ; SYSROM2
EROUT-   ADDR   40567   ; SYSROM2
KEYTRM   ADDR   40625   ; SYSROM2
KEYDSP   ADDR   40632   ; SYSROM2
INPUT.   ADDR   41166   ; SYSROM2
CHKEOL   ADDR   41364   ; SYSROM2
INPUN.   ADDR   41411   ; SYSROM2
ER43     ADDR   41500   ; SYSROM2
INPU$.   ADDR   41563   ; SYSROM2
BCKSTO   ADDR   41675   ; SYSROM2
RESTRT   ADDR   41706   ; SYSROM2
ISETUP   ADDR   41725   ; SYSROM2
ITAIL.   ADDR   41737   ; SYSROM2
ANNUNS   ADDR   41740   ; SYSROM2
ANN.B+   ADDR   41744   ; SYSROM2
ANN.B-   ADDR   41751   ; SYSROM2
ANN.E+   ADDR   41756   ; SYSROM2
ANN.E-   ADDR   41763   ; SYSROM2
PGMANN   ADDR   41773   ; SYSROM2
ANN.P+   ADDR   42000   ; SYSROM2
ANN.P-   ADDR   42005   ; SYSROM2
ANN.A+   ADDR   42012   ; SYSROM2
ANN.A-   ADDR   42025   ; SYSROM2
FETCH.   ADDR   42131   ; SYSROM2
EDLIN#   ADDR   42202   ; SYSROM2
EDLIN-   ADDR   42206   ; SYSROM2
LINEDR   ADDR   42357   ; SYSROM2
EOL14?   ADDR   42534   ; SYSROM2: 
CREOL?   ADDR   42535   ; SYSROM2
PRNTCH   ADDR   42565   ; SYSROM2: 
PR.EOL   ADDR   42626   ; SYSROM2
DSPSET   ADDR   42677   ; SYSROM2
PILREP   ADDR   42745   ; SYSROM2
LADDEV   ADDR   42776   ; SYSROM2
SPY      ADDR   43027   ; SYSROM2
SVCCHK   ADDR   43053   ; SYSROM2
MELJSB   ADDR   43141   ; SYSROM2
SYSJSB   ADDR   43155   ; SYSROM2: 
ROMJSB   ADDR   43224   ; SYSROM2: 
RMERR.   ADDR   43434   ; SYSROM2
ROM:GO   ADDR   43441   ; SYSROM2
SAVEME   ADDR   43501   ; SYSROM2
RUNROM   ADDR   43524   ; SYSROM2
GETRM2   ADDR   43536   ; SYSROM2
GETROM   ADDR   43541   ; SYSROM2
NXTKWF   ADDR   43603   ; SYSROM2
NXTROM   ADDR   43654   ; SYSROM2
UNROM    ADDR   43742   ; SYSROM2
ROMSET   ADDR   43755   ; SYSROM2
ROMRTN   ADDR   44035   ; SYSROM2
CYCLE    ADDR   44110   ; SYSROM2
TRFLO.   ADDR   44207   ; SYSROM2
TROFF.   ADDR   44214   ; SYSROM2
TRVAR.   ADDR   44220   ; SYSROM2
TRCVBL   ADDR   44234   ; SYSROM2
TRCLP    ADDR   44335   ; SYSROM2
TRCFP    ADDR   44345   ; SYSROM2
RNLST?   ADDR   44437   ; SYSROM2
TRJUMP   ADDR   44446   ; SYSROM2
OUTERB   ADDR   44512   ; SYSROM2
TRCHED   ADDR   44527   ; SYSROM2
APPT.    ADDR   44623   ; SYSROM2
KEYS.    ADDR   44637   ; SYSROM2
CARD.    ADDR   44673   ; SYSROM2
EDIT     ADDR   44712   ; SYSROM2
ASNPAR   ADDR   44717   ; SYSROM2
FLTOFL   ADDR   44776   ; SYSROM2
PUSH1F   ADDR   45033   ; SYSROM2
FILNM+   ADDR   45042   ; SYSROM2
FILNM?   ADDR   45050   ; SYSROM2
FILNM!   ADDR   45074   ; SYSROM2
FLORD    ADDR   45105   ; SYSROM2
FLORDT   ADDR   45107   ; SYSROM2
GETNAM   ADDR   45167   ; SYSROM2
GETFST   ADDR   45373   ; SYSROM2
FLCHR?   ADDR   45461   ; SYSROM2
ANYER?   ADDR   45472   ; SYSROM2
ERRREP   ADDR   45501   ; SYSROM2
REPORT   ADDR   45512   ; SYSROM2
REPRT+   ADDR   45524   ; SYSROM2
CLRERR   ADDR   45702   ; SYSROM2
BLEBUF   ADDR   45712   ; SYSROM2
WARN     ADDR   45723   ; SYSROM2
WARN.R   ADDR   46064   ; SYSROM2
ERR.R2   ADDR   46105   ; SYSROM2
ERRORR   ADDR   46214   ; SYSROM2
ERROR    ADDR   46221   ; SYSROM2
ERROR+   ADDR   46231   ; SYSROM2: 
ERR1     ADDR   46244   ; SYSROM2: 
ERR1+    ADDR   46254   ; SYSROM2: 
REP.1    ADDR   46407   ; SYSROM2
REPRT-   ADDR   46435   ; SYSROM2
ERRMSG   ADDR   46560   ; SYSROM2
SETUP$   ADDR   46612   ; SYSROM2
SETCOM   ADDR   46626   ; SYSROM2
CMPSTR   ADDR   46652   ; SYSROM2
UNEQ$.   ADDR   46675   ; SYSROM2
LEQ$.    ADDR   46704   ; SYSROM2
GEQ$.    ADDR   46715   ; SYSROM2
LT$.     ADDR   46726   ; SYSROM2
EQ$.     ADDR   46737   ; SYSROM2
GR$.     ADDR   46746   ; SYSROM2
EQ.      ADDR   46757   ; SYSROM2
UNEQ.    ADDR   46772   ; SYSROM2
LEQ.     ADDR   47013   ; SYSROM2
GEQ.     ADDR   47034   ; SYSROM2
GR.      ADDR   47045   ; SYSROM2
LT.      ADDR   47074   ; SYSROM2
OR.      ADDR   47113   ; SYSROM2
EXOR.    ADDR   47126   ; SYSROM2
NOT.     ADDR   47141   ; SYSROM2
AND.     ADDR   47152   ; SYSROM2
DEFKEY   ADDR   47216   ; SYSROM2
KYOPEN   ADDR   47247   ; SYSROM2
KEYNAM   ADDR   47255   ; SYSROM2
DEFKY.   ADDR   47313   ; SYSROM2
FETK.    ADDR   47473   ; SYSROM2
SAVENV   ADDR   47704   ; SYSROM2
RESTEN   ADDR   47766   ; SYSROM2
VCREST   ADDR   47774   ; SYSROM2
RECOVR   ADDR   50005   ; SYSROM2
ENDEN?   ADDR   50070   ; SYSROM2
POPENV   ADDR   50100   ; SYSROM2
CLRENV   ADDR   50236   ; SYSROM2
RUN.     ADDR   50254   ; SYSROM2
RUNKEE   ADDR   50271   ; SYSROM2
RUNIT    ADDR   50347   ; SYSROM2
SYCALL   ADDR   50354   ; SYSROM2
CALL     ADDR   50356   ; SYSROM2
VCCALL   ADDR   50401   ; SYSROM2
CALL.    ADDR   50517   ; SYSROM2
DOSTEP   ADDR   50552   ; SYSROM2
STOP.    ADDR   50671   ; SYSROM2
STALLS   ADDR   50672   ; SYSROM2
STALL    ADDR   50703   ; SYSROM2
STALL+   ADDR   50710   ; SYSROM2
CONTI.   ADDR   50714   ; SYSROM2
REMDAC   ADDR   50761   ; SYSROM2
END.     ADDR   51004   ; SYSROM2
SETCL#   ADDR   51052   ; SYSROM2
TEXT.    ADDR   51076   ; SYSROM2
BASIC.   ADDR   51105   ; SYSROM2
LIF1.    ADDR   51115   ; SYSROM2
NAME.    ADDR   51123   ; SYSROM2
EDIT.    ADDR   51132   ; SYSROM2
DFNAME   ADDR   51140   ; SYSROM2
EDITIT   ADDR   51223   ; SYSROM2
SETED    ADDR   51410   ; SYSROM2
MERGE.   ADDR   51471   ; SYSROM2
SAFE!    ADDR   51635   ; SYSROM2
INENV?   ADDR   51756   ; SYSROM2
CALEN?   ADDR   52017   ; SYSROM2
VERMN2   ADDR   52027   ; SYSROM2
HANDI    ADDR   52031   ; SYSROM2
HANDIR   ADDR   52034   ; SYSROM2
HANDI0   ADDR   52114   ; SYSROM2
FTSVL    ADDR   52236   ; SYSROM2
SVVAL3   ADDR   52244   ; SYSROM2
SVADR+   ADDR   52251   ; SYSROM2
SVADR    ADDR   52252   ; SYSROM2
FTSTL    ADDR   52261   ; SYSROM2
FTSTLS   ADDR   52272   ; SYSROM2
ICONST   ADDR   52316   ; SYSROM2
SCONST   ADDR   52325   ; SYSROM2
STOSTM   ADDR   52344   ; SYSROM2
STOST    ADDR   52345   ; SYSROM2
STOSVM   ADDR   52627   ; SYSROM2
STOSV    ADDR   52630   ; SYSROM2
AVADR1   ADDR   53146   ; SYSROM2
AVADR2   ADDR   53153   ; SYSROM2
AVVAL1   ADDR   53176   ; SYSROM2
AVVAL2   ADDR   53203   ; SYSROM2
GORTN    ADDR   53216   ; SYSROM2
FTADR    ADDR   53254   ; SYSROM2
FNCAL$   ADDR   53314   ; SYSROM2
INTCON   ADDR   53727   ; SYSROM2
I#PUSH   ADDR   53732   ; SYSROM2
SUBST1   ADDR   53742   ; SYSROM2
SVADCK   ADDR   54012   ; SYSROM2
SUBST2   ADDR   54041   ; SYSROM2
FNLET.   ADDR   54071   ; SYSROM2
FNRTN.   ADDR   54133   ; SYSROM2
FNRET.   ADDR   54221   ; SYSROM2
CAT.     ADDR   54332   ; SYSROM2
CATLIN   ADDR   54353   ; SYSROM2
CATAL.   ADDR   54415   ; SYSROM2
UPENT    ADDR   54423   ; SYSROM2
DNENT    ADDR   54431   ; SYSROM2
CAT$.    ADDR   54473   ; SYSROM2
ROUND    ADDR   54501   ; SYSROM2
EFORM    ADDR   54572   ; SYSROM2
LCDOUT   ADDR   54673   ; SYSROM2
PUTWIN   ADDR   55326   ; SYSROM2
CH2LCD   ADDR   55375   ; SYSROM2
G1$OR*   ADDR   55577   ; SYSROM2
G01$/*   ADDR   55607   ; SYSROM2
STR?*?   ADDR   55631   ; SYSROM0: 
DSPIS.   ADDR   55656   ; SYSROM2
PRINS.   ADDR   55667   ; SYSROM2
STAR?    ADDR   55703   ; SYSROM2
CONFIG   ADDR   55727   ; SYSROM2
TAB      ADDR   55733   ; SYSROM2
CLEAN-   ADDR   55762   ; SYSROM2
DONE     ADDR   55774   ; SYSROM2
CHANGE   ADDR   56002   ; SYSROM2
GETPAD   ADDR   56560   ; SYSROM2
GET#1    ADDR   56624   ; SYSROM2
GET#2+   ADDR   56632   ; SYSROM2
LSTIO.   ADDR   56653   ; SYSROM2
REST.    ADDR   56731   ; SYSROM2
OFFIO.   ADDR   57006   ; SYSROM2
OFFUNL   ADDR   57011   ; SYSROM2
SETOFF   ADDR   57021   ; SYSROM2
CLROFF   ADDR   57026   ; SYSROM2
LPOFF    ADDR   57040   ; SYSROM2
LPON     ADDR   57050   ; SYSROM2
SETIT    ADDR   57060   ; SYSROM2
CLRTMT   ADDR   57070   ; SYSROM2: 
CLOOP.   ADDR   57106   ; SYSROM2
CLDEV.   ADDR   57117   ; SYSROM2
THERE?   ADDR   57164   ; SYSROM2
THERE!   ADDR   57175   ; SYSROM2
SKPCHK   ADDR   57212   ; SYSROM2
CHKEND   ADDR   57215   ; SYSROM2
MOVEIT   ADDR   57246   ; SYSROM2
EVIL     ADDR   57360   ; SYSROM2
PRSTR.   ADDR   57437   ; SYSROM2
PRNUM.   ADDR   57546   ; SYSROM2
OUTNUM   ADDR   57554   ; SYSROM2
RESFIL   ADDR   57646   ; SYSROM2
BLKFIL   ADDR   57656   ; SYSROM2
ON/OFF   ADDR   57727   ; SYSROM2
ONOFF2   ADDR   57735   ; SYSROM2
ONTOK.   ADDR   57766   ; SYSROM2
OFTOK.   ADDR   57774   ; SYSROM2
* ***************************
ALTROM   ADDR   60000   ; ALTROM: start
ASCIIS   ADDR   60151   ; ALTROM: 
APINFO   ADDR   61541   ; ALTROM
APTDEL   ADDR   61762   ; ALTROM
APDEL_   ADDR   62001   ; ALTROM
APTDSP   ADDR   62033   ; ALTROM
APTERR   ADDR   62054   ; ALTROM
APTFND   ADDR   62112   ; ALTROM
APFND_   ADDR   62116   ; ALTROM
APTGET   ADDR   62154   ; ALTROM
APTINS   ADDR   62202   ; ALTROM
APTR+    ADDR   62244   ; ALTROM
APTR-    ADDR   62262   ; ALTROM
GETLNX   ADDR   62307   ; ALTROM
RSTBUF   ADDR   62331   ; ALTROM
SAVBUF   ADDR   62342   ; ALTROM
TIMDIV   ADDR   62355   ; ALTROM
TTMPLT   ADDR   62407   ; ALTROM
ATMPLT   ADDR   62415   ; ALTROM
APMSKE   ADDR   62467   ; ALTROM
APMSKY   ADDR   62474   ; ALTROM
STMMSK   ADDR   62505   ; ALTROM
TIMMSK   ADDR   62512   ; ALTROM
APPTTM   ADDR   62522   ; ALTROM
YEARTM   ADDR   62637   ; ALTROM
REPTTM   ADDR   62676   ; ALTROM
APPTMD   ADDR   62744   ; ALTROM
APEXIT   ADDR   63212   ; ALTROM
TIMEMD   ADDR   63472   ; ALTROM
CSTRIG   ADDR   63556   ; ALTROM
CKTRIG   ADDR   63562   ; ALTROM
AINCHK   ADDR   63660   ; ALTROM
RINCHK   ADDR   63767   ; ALTROM
UPDISP   ADDR   63777   ; ALTROM
STDATE   ADDR   64021   ; ALTROM
TICK     ADDR   64104   ; ALTROM
APTCHK   ADDR   64144   ; ALTROM
DCCLOK   ADDR   64460   ; ALTROM
ENCLOK   ADDR   65052   ; ALTROM
FINDTD   ADDR   65370   ; ALTROM
MAXDAT   ADDR   65373   ; ALTROM
FNDTD_   ADDR   65453   ; ALTROM
FXAPPT   ADDR   66111   ; ALTROM
ALMCHK   ADDR   66327   ; ALTROM
DATCHK   ADDR   66410   ; ALTROM
DATCK_   ADDR   66447   ; ALTROM
DAYTAB   ADDR   67016   ; ALTROM
DAYOK    ADDR   67043   ; ALTROM
DCDAY    ADDR   67077   ; ALTROM
DUPCHK   ADDR   67173   ; ALTROM
FLDCHK   ADDR   67302   ; ALTROM
FXALRM   ADDR   67330   ; ALTROM
FXDATE   ADDR   67363   ; ALTROM
FXDAY    ADDR   67447   ; ALTROM
FXTIME   ADDR   67467   ; ALTROM
FXYEAR   ADDR   67557   ; ALTROM
LEAPYR   ADDR   67624   ; ALTROM
MINYY    ADDR   67646   ; ALTROM
MINMM    ADDR   67650   ; ALTROM
MINDD    ADDR   67653   ; ALTROM
MINHH    ADDR   67656   ; ALTROM
MINMN    ADDR   67660   ; ALTROM
NUNPCK   ADDR   67665   ; ALTROM
RPTADJ   ADDR   67750   ; ALTROM
RPTINP   ADDR   70362   ; ALTROM
RPTPRS   ADDR   70405   ; ALTROM
TIMCHK   ADDR   70647   ; ALTROM
VERMN3   ADDR   71016   ; ALTROM
ACREAT   ADDR   71020   ; ALTROM
AOPEN    ADDR   71040   ; ALTROM
AOPEN_   ADDR   71044   ; ALTROM
APPTRS   ADDR   71051   ; ALTROM
ALBEEP   ADDR   71063   ; ALTROM
APPROC   ADDR   71274   ; ALTROM
APSTAT   ADDR   71400   ; ALTROM
APTACK   ADDR   71430   ; ALTROM
APTMRG   ADDR   71535   ; ALTROM
APTRIG   ADDR   71663   ; ALTROM
STALRM   ADDR   72000   ; ALTROM
ALARM.   ADDR   72060   ; ALTROM
OFALRM   ADDR   72104   ; ALTROM
CNTRIG   ADDR   72110   ; ALTROM
GETTD    ADDR   72154   ; ALTROM
MULT60   ADDR   72163   ; ALTROM
NXTAPT   ADDR   72175   ; ALTROM
PRNOTE   ADDR   72222   ; ALTROM
CRTMDT   ADDR   72450   ; ALTROM
DTECNV   ADDR   72507   ; ALTROM
TMECMD   ADDR   72572   ; ALTROM
TCKTGL   ADDR   72720   ; ALTROM
TMESET   ADDR   73262   ; ALTROM
STRTME   ADDR   74401   ; ALTROM
UPRCSE   ADDR   74611   ; ALTROM
LOCK.    ADDR   74666   ; ALTROM
LOCK?    ADDR   74713   ; ALTROM
CLRINT   ADDR   75005   ; ALTROM
START?   ADDR   75016   ; ALTROM
START    ADDR   75040   ; ALTROM
SYSINI   ADDR   75055   ; ALTROM
CHEDIT   ADDR   75344   ; ALTROM
I/ROFF   ADDR   76346   ; ALTROM
SETI/R   ADDR   76350   ; ALTROM
DEL      ADDR   76477   ; ALTROM
LA       ADDR   76737   ; ALTROM
RA       ADDR   77015   ; ALTROM
SHELD?   ADDR   77317   ; ALTROM
SHLA     ADDR   77506   ; ALTROM
SHRA     ADDR   77530   ; ALTROM
MARGN.   ADDR   77547   ; ALTROM
SHFET    ADDR   77557   ; ALTROM
MPYR_    ADDR   77632   ; ALTROM
* **************************
FILDRV   ADDR   60026   ; MELROM
FLCAT    ADDR   60337   ; MELROM
FLPURG   ADDR   61014   ; MELROM
FLPUR-   ADDR   61045   ; MELROM
FLCOPY   ADDR   61057   ; MELROM
FLPUR!   ADDR   61622   ; MELROM
FLTTOT   ADDR   61665   ; MELROM
FLSWCH   ADDR   61754   ; MELROM
FLR36    ADDR   61757   ; MELROM
FLFTOF   ADDR   61773   ; MELROM
FLRENA   ADDR   62263   ; MELROM
PACK.    ADDR   62346   ; MELROM
ASINIT   ADDR   63114   ; MELROM
INIT.    ADDR   63153   ; MELROM
INISIZ   ADDR   63535   ; MELROM
VFRWK+   ADDR   63636   ; MELROM
VLAD+    ADDR   63643   ; MELROM
VFHI+    ADDR   63650   ; MELROM
VFDIR+   ADDR   63655   ; MELROM
DDLRP+   ADDR   63662   ; MELROM
DATRP+   ADDR   63667   ; MELROM
RDYSD+   ADDR   63674   ; MELROM
VFBSY+   ADDR   63701   ; MELROM
VFNXE+   ADDR   63706   ; MELROM
VFLTY+   ADDR   63710   ; MELROM
VFLTY+   ADDR   63713   ; MELROM
VFRWO+   ADDR   63720   ; MELROM
VFTAD+   ADDR   63725   ; MELROM
VFUTL+   ADDR   63732   ; MELROM
FL80F+   ADDR   63743   ; MELROM
FLFIN+   ADDR   63750   ; MELROM
FLFIND   ADDR   63753   ; MELROM
FL80FE   ADDR   64011   ; MELROM
FLCAF+   ADDR   64024   ; MELROM
FLSET1   ADDR   64031   ; MELROM
FLSTFN   ADDR   64043   ; MELROM
FLSTAK   ADDR   64072   ; MELROM
FLVFO?   ADDR   64137   ; MELROM
FLSDON   ADDR   64206   ; MELROM
FLNEW    ADDR   64250   ; MELROM
FLSAM?   ADDR   65011   ; MELROM
VFHI     ADDR   65017   ; MELROM
VFSET    ADDR   65104   ; MELROM
CLRCOD   ADDR   65223   ; MELROM
VFMM?    ADDR   65232   ; MELROM
BADDEV   ADDR   65333   ; MELROM
VERB     ADDR   65507   ; MELROM
FIX65    ADDR   65555   ; MELROM
VFADDR   ADDR   65600   ; MELROM
VFRWSK   ADDR   65650   ; MELROM
VFRWSO   ADDR   65662   ; MELROM
VFRSWB   ADDR   65740   ; MELROM
VFRWRD   ADDR   65763   ; MELROM
VFWACH   ADDR   66057   ; MELROM
VFWAC2   ADDR   66075   ; MELROM
VFRREC   ADDR   66200   ; MELROM
VFWOOP   ADDR   66212   ; MELROM
VFRWWR   ADDR   66222   ; MELROM
VFWR     ADDR   66250   ; MELROM
VFWREC   ADDR   66266   ; MELROM
VFDDL2   ADDR   66276   ; MELROM
VFWRDK   ADDR   66303   ; MELROM
VFADCL   ADDR   66350   ; MELROM
VFCLCH   ADDR   66355   ; MELROM
VFWRCL   ADDR   66370   ; MELROM
VFLTBY   ADDR   66377   ; MELROM
VFDSY    ADDR   66406   ; MELROM
VFSTAT   ADDR   66417   ; MELROM
VFERR    ADDR   66510   ; MELROM
VFRCEX   ADDR   66566   ; MELROM
VFRWUO   ADDR   66577   ; MELROM
VFCDEP   ADDR   66606   ; MELROM
VFCD46   ADDR   66614   ; MELROM
VFCDCO   ADDR   66627   ; MELROM
VFTERM   ADDR   66642   ; MELROM
VFBYE    ADDR   66655   ; MELROM
VFDIR    ADDR   66674   ; MELROM
VFNXDE   ADDR   66715   ; MELROM
VFNXD-   ADDR   66730   ; MELROM
VFDECL   ADDR   66737   ; MELROM
VFWRDE   ADDR   66750   ; MELROM
VFWRD1   ADDR   66755   ; MELROM
VFWRD-   ADDR   66760   ; MELROM
VFEOD?   ADDR   66767   ; MELROM
VFPED?   ADDR   66774   ; MELROM
VFLED?   ADDR   67011   ; MELROM
VFSLOC   ADDR   67031   ; MELROM
VFMFP?   ADDR   67045   ; MELROM
VFRENA   ADDR   67053   ; MELROM
VFMOVE   ADDR   67070   ; MELROM
VFMOVE   ADDR   67073   ; MELROM
VFEXCH   ADDR   67172   ; MELROM
VFBUO    ADDR   67204   ; MELROM
VFROO?   ADDR   67220   ; MELROM
VFLIF?   ADDR   67263   ; MELROM
VFRLF?   ADDR   67272   ; MELROM
VFRVDE   ADDR   67303   ; MELROM
VFMSS    ADDR   67331   ; MELROM
VFSKFL   ADDR   67343   ; MELROM
VFDUDE   ADDR   67356   ; MELROM
VFTRNL   ADDR   67417   ; MELROM
VERMN5   ADDR   67504   ; MELROM
VFTIME   ADDR   67506   ; MELROM
VFRDE    ADDR   67550   ; MELROM
VF1TO2   ADDR   67730   ; MELROM
VFSECT   ADDR   67743   ; MELROM
DDLREP   ADDR   67774   ; MELROM
DDTREP   ADDR   70001   ; MELROM
DATSND   ADDR   70010   ; MELROM
DATSD-   ADDR   70012   ; MELROM
UNTUNL   ADDR   70046   ; MELROM
JSBCRT   ADDR   70055   ; MELROM
REVBYT   ADDR   70063   ; MELROM
REVPSH   ADDR   70075   ; MELROM
TENRIT   ADDR   70107   ; MELROM
TRNSLP   ADDR   70126   ; MELROM
CLIF     ADDR   70606   ; MELROM
NOTRSH   ADDR   70755   ; MELROM
LBL4     ADDR   71140   ; MELROM
TRFRM.   ADDR   71422   ; MELROM
THERE1   ADDR   71514   ; MELROM
MYSTPR   ADDR   72022   ; MELROM
MYSETN   ADDR   72030   ; MELROM
ASTBCD   ADDR   72055   ; MELROM
MBLIMP   ADDR   72100   ; MELROM
MBLIM-   ADDR   72106   ; MELROM
PUTCHR   ADDR   72121   ; MELROM
SETL30   ADDR   72133   ; MELROM
PCR.     ADDR   72145   ; MELROM
ER16+    ADDR   72162   ; MELROM
RECON!   ADDR   72203   ; MELROM
EDITFI   ADDR   72257   ; MELROM
MALLOC   ADDR   72334   ; MELROM
MYSET2   ADDR   72350   ; MELROM
ATN2.    ADDR   72364   ; MELROM
ATN2.+   ADDR   72401   ; MELROM
ISIN.    ADDR   72455   ; MELROM
ICOS.    ADDR   72465   ; MELROM
ITAN.    ADDR   72475   ; MELROM
BRT5     ADDR   72501   ; MELROM
BRT10    ADDR   72511   ; MELROM
WAKEUP   ADDR   73146   ; MELROM
WAKEUP   ADDR   73146   ; MELROM
REM10.   ADDR   73377   ; MELROM
MOD10.   ADDR   73405   ; MELROM
RNDIZ    ADDR   73536   ; MELROM
YTX5_    ADDR   73613   ; MELROM
RND10.   ADDR   73764   ; MELROM
DEVOK    ADDR   74060   ; MELROM
ERMSS    ADDR   74175   ; MELROM
DEG.     ADDR   74773   ; MELROM
RAD.     ADDR   74777   ; MELROM
TIME$.   ADDR   76155   ; MELROM
DATE$.   ADDR   76164   ; MELROM
DATE.    ADDR   76263   ; MELROM
TIME.    ADDR   76372   ; MELROM
STBEP_   ADDR   76524   ; MELROM
BEEP._   ADDR   76554   ; MELROM
BEEPR_   ADDR   76673   ; MELROM
ONE7+B   ADDR   76756   ; MELROM
SETWDB   ADDR   77125   ; MELROM
WAITCK   ADDR   77144   ; MELROM
CAT$     ADDR   77200   ; MELROM
CATALL   ADDR   77353   ; MELROM
CATTMP   ADDR   77536   ; MELROM
CATBUF   ADDR   77542   ; MELROM
CATHED   ADDR   77670   ; MELROM
FLVFO+   ADDR   77727   ; MELROM
****************************
TOPROM    ADDR       160000     ; start of BASROM
BASLOC    ADDR       160002     ; BASROM
BTAB.R    ADDR       160042     ; BASROM
ERRORX    ADDR       161240     ; BASROM
TO?I      ADDR       161244     ; BASROM
ON?I      ADDR       161263     ; BASROM
ON?R      ADDR       161267     ; BASROM
ATSIGN    ADDR       161355     ; BASROM
END.ON    ADDR       161416     ; BASROM
WAIT.     ADDR       161546     ; BASROM
WCKJSB    ADDR       161557     ; BASROM
ONE7PR    ADDR       161565     ; BASROM
DISP.     ADDR       161612     ; BASROM
PRINT.    ADDR       161630     ; BASROM
DOCOM     ADDR       161643     ; BASROM
USING.    ADDR       161771     ; BASROM
ULIN#.    ADDR       162023     ; BASROM
PRLINE    ADDR       162056     ; BASROM
KYADDR    ADDR       162127     ; BASROM
MODEKY    ADDR       162162     ; BASROM
MODE?     ADDR       162253     ; BASROM
ASSIN.    ADDR       162277     ; BASROM
REST#.    ADDR       162502     ; BASROM
PRIN#.    ADDR       162516     ; BASROM
READ#.    ADDR       162532     ; BASROM
REST0.    ADDR       162600     ; BASROM
RESTN.    ADDR       162606     ; BASROM
READ.     ADDR       162623     ; BASROM
READ.#    ADDR       162626     ; BASROM
TOBIG?    ADDR       163260     ; BASROM
READN.    ADDR       163304     ; BASROM
READS.    ADDR       163311     ; BASROM
F27-57    ADDR       163427     ; BASROM
PR#END    ADDR       163467     ; BASROM
PRSEM.    ADDR       163543     ; BASROM
COMA#.    ADDR       163661     ; BASROM
SEMI#.    ADDR       163661     ; BASROM
PR#VAL    ADDR       163661     ; BASROM
S30-77    ADDR       164030     ; BASROM
P#ARAY    ADDR       164176     ; BASROM
R#ARAY    ADDR       164331     ; BASROM
LENCAL    ADDR       164471     ; BASROM
IO?       ADDR       164637     ; BASROM
GET#LN    ADDR       164654     ; BASROM
RSETUP    ADDR       164702     ; BASROM
PSETUP    ADDR       164713     ; BASROM
ALWAYS    ADDR       164721     ; BASROM
TRAPTX    ADDR       165157     ; BASROM
FILE#?    ADDR       165200     ; BASROM
EOL.      ADDR       165220     ; BASROM
C.INIT    ADDR       165253     ; BASROM
STAND.    ADDR       165277     ; BASROM
STAND-    ADDR       165302     ; BASROM
S.OFF     ADDR       165305     ; BASROM
A.ZERO    ADDR       165307     ; BASROM
S.ON      ADDR       165321     ; BASROM
STAND+    ADDR       165337     ; BASROM
PILON!    ADDR       165350     ; BASROM
PILOF!    ADDR       165403     ; BASROM
IDYSND    ADDR       165415     ; BASROM
UNTSND    ADDR       165422     ; BASROM
CMDSND    ADDR       165425     ; BASROM
RDYSND    ADDR       165430     ; BASROM
SNDFRM    ADDR       165433     ; BASROM
UNLSND    ADDR       165745     ; BASROM
UNLRP?    ADDR       165755     ; BASROM
UNLREP    ADDR       165766     ; BASROM
CL.ACT    ADDR       165776     ; BASROM
UNTREP    ADDR       166012     ; BASROM
TADREP    ADDR       166017     ; BASROM
VFTAD     ADDR       166017     ; BASROM
LADREP    ADDR       166030     ; BASROM
VFLAD     ADDR       166030     ; BASROM
CMDREP    ADDR       166037     ; BASROM
DATREP    ADDR       166044     ; BASROM
JTRUE#    ADDR       166065     ; BASROM
JMPSUB    ADDR       166104     ; BASROM
JMPLN#    ADDR       166124     ; BASROM
EJMP#     ADDR       166125     ; BASROM
NEWLIN    ADDR       166125     ; BASROM
SUBSTF    ADDR       166144     ; BASROM
ON.       ADDR       166315     ; BASROM
INVRTN    ADDR       166404     ; BASROM
RETRN.    ADDR       166412     ; BASROM
FNDRTN    ADDR       166417     ; BASROM
POP.      ADDR       166436     ; BASROM
INVPOP    ADDR       166443     ; BASROM
REMGSB    ADDR       166524     ; BASROM
FOR.      ADDR       166544     ; BASROM
GETFC     ADDR       166714     ; BASROM
NEXT.     ADDR       166727     ; BASROM
EXNXT     ADDR       167035     ; BASROM
TO.       ADDR       167064     ; BASROM
STEP.     ADDR       167126     ; BASROM
SKPLOP    ADDR       167225     ; BASROM
CLRLCD    ADDR       167644     ; BASROM
CURSE?    ADDR       167671     ; BASROM
CURSE     ADDR       167677     ; BASROM
DECURS    ADDR       167750     ; BASROM
INWIND    ADDR       167773     ; BASROM
IO.ON     ADDR       170014     ; BASROM
IO.OFF    ADDR       170025     ; BASROM
DOSEE     ADDR       170034     ; BASROM
UNSEE     ADDR       170041     ; BASROM
ADDR      ADDR       170044     ; BASROM
LCDRDY    ADDR       170047     ; BASROM
TOLCD     ADDR       170056     ; BASROM
LCDRST    ADDR       170067     ; BASROM
ADDR      ADDR       170102     ; BASROM
SCANN     ADDR       170110     ; BASROM
SCANLX    ADDR       170623     ; BASROM
CVNUM     ADDR       171532     ; BASROM
FORMN+    ADDR       171543     ; BASROM
FORMN     ADDR       171553     ; BASROM
ARITH     ADDR       171651     ; BASROM
ARDON     ADDR       171775     ; BASROM
VERMN4    ADDR       172705     ; BASROM
CRDUPR    ADDR       173144     ; BASROM
CRDWPR    ADDR       173154     ; BASROM
CRDEXM    ADDR       173226     ; BASROM
CRDCPY    ADDR       173312     ; BASROM
MKEPRV    ADDR       173360     ; BASROM
STORE     ADDR       173410     ; BASROM
LOAD      ADDR       173714     ; BASROM
RDTRY     ADDR       173763     ; BASROM
VERIFY    ADDR       174051     ; BASROM
GOCARD    ADDR       174150     ; BASROM
ABTHRD    ADDR       174352     ; BASROM
READCR    ADDR       174416     ; BASROM
WRITCR    ADDR       174423     ; BASROM
NUMOUT    ADDR       174665     ; BASROM
CRTFLE    ADDR       175054     ; BASROM
SUMIT     ADDR       175366     ; BASROM
SUMIT+    ADDR       175371     ; BASROM
FINMSG    ADDR       175645     ; BASROM
ABORT     ADDR       175715     ; BASROM
VER.      ADDR       175772     ; BASROM
MRGIN.    ADDR       176001     ; BASROM
FXRENU    ADDR       176007     ; BASROM
VERSUB    ADDR       176040     ; BASROM
RESPUT    ADDR       176045     ; BASROM
CONCA.    ADDR       176062     ; BASROM
CONCA-    ADDR       176075     ; BASROM
KEY$.     ADDR       176140     ; BASROM
CHR$.     ADDR       176172     ; BASROM
STR1CH    ADDR       176175     ; BASROM
VAL$.     ADDR       176213     ; BASROM
ERRL.     ADDR       176253     ; BASROM
LEN.      ADDR       176276     ; BASROM
MEM.      ADDR       176306     ; BASROM
NUM.      ADDR       176325     ; BASROM
PUINTG    ADDR       176344     ; BASROM
RESUL.    ADDR       176355     ; BASROM
VAL.      ADDR       176365     ; BASROM
ERNUM.    ADDR       176506     ; BASROM
POS.      ADDR       176517     ; BASROM
POSRUN    ADDR       176527     ; BASROM
TAB.      ADDR       176621     ; BASROM
UPC$.     ADDR       176714     ; BASROM
PRNFMT    ADDR       176745     ; BASROM
LINEND    ADDR       177126     ; BASROM
PUTBIN    ADDR       177211     ; BASROM
SET       ADDR       177240     ; BASROM
BEEP      ADDR       177264     ; BASROM
STBEEP    ADDR       177312     ; BASROM
BEEP.     ADDR       177321     ; BASROM
BEEPER    ADDR       177327     ; BASROM
SKIPI     ADDR       177336     ; BASROM
SKIPS     ADDR       177341     ; BASROM
SKIP!     ADDR       177344     ; BASROM
SKIPEM    ADDR       177347     ; BASROM
SKIPD     ADDR       177352     ; BASROM
SKIPIT    ADDR       177355     ; BASROM
*
* global symbols added for assembling SYSROM
*
GETRUN    ADDR       018AAH     ; SYSROM0
HANDIO    ADDR       0544CH     ; SYSROM0
GCHAR#    ADDR       0DEDH      ; SYSROM0 
GCHAR     ADDR       0DEBH      ; SYSROM0
G10R2N    ADDR       12F3H      ; SYSROM0
GETLIN    ADDR       15DDH      ; SYSROM0
ALLOC     ADDR       1F9FH      ; SYSROM
RELJMP    ADDR       26A1H      ; SYSROM
TSTALO    ADDR       2207H      ; SYSROM
INITGL    ADDR       00F5H      ; SYSROM
PRSE!!    ADDR       1343H      ; SYSROM
GETLN     ADDR       06C9H      ; SYSROM
MSGOUT    ADDR       07E3H      ; SYSROM
SAVRG+    ADDR       0E39H      ; SYSROM
GETALN    ADDR       00E6H      ; SYSROM
BRTS35    ADDR       069FH      ; SYSROM
RTOIN     ADDR       1CEAH      ; SYSROM
LETGO     ADDR       079AH      ; SYSROM
TMRGO     ADDR       3FF2H      ; SYSROM

S17-77 EQU 0CF0FH
S20-77 EQU  0D010H
S20-37 EQU 0F010H
S22-77  EQU 0D212H
S30-57  EQU 0E818H
S30-31  EQU  0FE18H


FLGTFN   ADDR       6823H       ; MELROM
FLG0FE   ADDR       6809H
FLG0F+   ADDR       67E3H
FLVF0?   ADDR       685FH
VFMOVE   ADDR       6E38H
FLGET1   ADDR       6819H
VFROO?   ADDR       6E90H
VFBSY    ADDR       6D06H
VFMSG    ADDR       6ED9H
VF1T02   ADDR       6FD8H
VFGLOC   ADDR       6E19H
VFRWSB   ADDR       6BE0H
ERMSG    ADDR       787DH
ASPACK   ADDR       64D7H
FLSBON   ADDR       6886H
VFLAD+   ADDR       67A3H
VFRWU0   ADDR       6D7FH
VFGET    ADDR       6A44H
VFWBU0   ADDR       6E84H
MYGETN   ADDR       7418H
TBL3B    ADDR       3E8BH
TINCHK   ADDR       67F7H
YINCHK   ADDR       67F7H
GETCLK   ADDR       745BH
DAYCHK   ADDR       6DADH

VF.RDE   EQU       5BH
VFWRTE   EQU       0H
TYN??    EQU       3FH
TRFTOK   EQU       1
BEEPLN   EQU       4H
BEEPFQ   EQU       4D
FLPWD0   EQU       24H
CATLEN   EQU       32D
DSPTGL   EQU       1
EXTON    EQU       040H
EXTOFF   EQU       0BFH
DMYOFF   EQU       0DFH
DEFALT   EQU       0FFH
H24OFF   EQU       0EFH
DXOFF    EQU       0F5H
XCTON    EQU       02H
XCTOFF   EQU       0FDH
DECON    EQU       08H
ADJLIM   EQU       0A0H
XCTFLG   EQU       2H
