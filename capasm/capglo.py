#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# This tool reads the text files with the global symbols for the HP-75,
# HP-85 and HP-87 and creates the global symbol class files for CAPASM.
# (c) Joachim Siebold 2020
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#----------------------------------------------------------------
#
# Changelog
# 18.05.2020 jsi
# - begin change log
#
import codecs


def main():
   for c in ['75', '85', '87']:
      infile=codecs.open("globals"+c+".txt","r",encoding="ISO-8859-1",errors="ignore")

      outfile=open("globals"+c+".py","w")
      outfile.write("#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n")
      outfile.write("#\n# Global symbols for HP-"+c+"\n")
      outfile.write("# Autogenerated file, do not modify!\n")
      outfile.write("#\n")
      outfile.write("class globalSymbols():\n")
      outfile.write("\n")
      outfile.write("   symbols= {\n")

      while True:
         line=infile.readline()
         if not line:
            break
         line=line.strip("\r\n")
         line=line.replace("	"," ")
         if line=="":
            continue
         if line[0]=="!":
            continue
         if line[0]== "*":
            continue
         tokens=line.split()
         if tokens[1]=="DAD":
            typ=0
         elif tokens[1]=="EQU":
            typ=1
         else:
            print(tokens[1])
            typ=2
         number=tokens[2]
         number=number.upper()
         if number[-1]=="D":
            value=int(number[0:-1])
         elif number[-1]=="C":
            print("unsupported")
            value=0
         else:
            try:
               value=int(number,8)
            except ValueError:
               print(c+" "+line)
               value=0

         outfile.write('      "'+tokens[0]+'" : ['+str(typ)+","+str(value)+"],\n")
      infile.close()
      outfile.write("   }\n")
      outfile.write("   @staticmethod\n")
      outfile.write("   def get(name):\n")
      outfile.write("      if name[0]=='=':\n")
      outfile.write("         name=name[1:]\n")
      outfile.write("      if name in globalSymbols.symbols.keys():\n")
      outfile.write("         return globalSymbols.symbols[name]\n")
      outfile.write("      else:\n")
      outfile.write("         return None\n")
      outfile.write("\n")
      outfile.close()
if __name__ == '__main__':
   main()

